<?xml version="1.0"?>
<doc>
<assembly>
<name>
ASCOM.DeviceInterfaces
</name>
</assembly>
<members>
<member name="P:ASCOM.DeviceInterface.ISafetyMonitor.Connected">
	<summary>
 Set True to connect to the device. Set False to disconnect from the device.
 You can also read the property to check whether it is connected.
 </summary>
	<value><c>true</c> if connected; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</remarks>
</member><member name="P:ASCOM.DeviceInterface.ISafetyMonitor.Description">
	<summary>
 Returns a description of the device, such as manufacturer and modelnumber. Any ASCII characters may be used. 
 </summary>
	<value>The description.</value>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ISafetyMonitor.DriverInfo">
	<summary>
 Descriptive and version information about this ASCOM driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
 It is intended to display detailed information on the ASCOM driver, including version and copyright data.
 See the <see cref="P:ASCOM.DeviceInterface.ISafetyMonitor.Description"/> property for information on the device itself.
 To get the driver version in a parseable string, use the <see cref="P:ASCOM.DeviceInterface.ISafetyMonitor.DriverVersion"/> property.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ISafetyMonitor.DriverVersion">
	<summary>
 A string containing only the major and minor version of the driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
 It should not to be confused with the <see cref="P:ASCOM.DeviceInterface.ISafetyMonitor.InterfaceVersion"/> property, which is the version of this specification supported by the 
 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ISafetyMonitor.InterfaceVersion">
	<summary>
 The interface version number that this device supports. Should return 2 for this interface version.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read ths property.
 If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
 In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ISafetyMonitor.Name">
	<summary>
 The short name of the driver, for display purposes
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ISafetyMonitor.SetupDialog">
	<summary>
 Launches a configuration dialog box for the driver.  The call will not return
 until the user clicks OK or cancel manually.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ISafetyMonitor.Action(System.String,System.String)">
	<summary>
 Invokes the specified device-specific action.
 </summary>
	<param name="ActionName">
 A well known name agreed by interested parties that represents the action to be carried out. 
 </param>
	<param name="ActionParameters">List of required parameters or an <see cref="T:System.String">Empty String</see> if none are required.
 </param>
	<returns>A string response. The meaning of returned strings is set by the driver author.</returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throws this exception if no actions are suported.</exception>
	<exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the SupportedActions method will inform clients 
 of driver capabilities, but the driver must still throw an ASCOM.ActionNotImplemented exception if it is asked to 
 perform an action that it does not support.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<example>Suppose filter wheels start to appear with automatic wheel changers; new actions could 
 be “FilterWheel:QueryWheels” and “FilterWheel:SelectWheel”. The former returning a 
 formatted list of wheel names and the second taking a wheel name and making the change, returning appropriate 
 values to indicate success or failure.
 </example>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 This method is intended for use in all current and future device types and to avoid name clashes, management of action names 
 is important from day 1. A two-part naming convention will be adopted - <b>DeviceType:UniqueActionName</b> where:
 <list type="bullet">
			<item><description>DeviceType is the same value as would be used by <see cref="P:ASCOM.Utilities.Chooser.DeviceType"/> e.g. Telescope, Camera, Switch etc.</description></item>
			<item><description>UniqueActionName is a single word, or multiple words joined by underscore characters, that sensibly describes the action to be performed.</description></item>
		</list>
		<para>
 It is recommended that UniqueActionNames should be a maximum of 16 characters for legibility.
 Should the same function and UniqueActionName be supported by more than one type of device, the reserved DeviceType of 
 “General” will be used. Action names will be case insensitive, so FilterWheel:SelectWheel, filterwheel:selectwheel 
 and FILTERWHEEL:SELECTWHEEL will all refer to the same action.</para>
		<para>The names of all supported actions must bre returned in the <see cref="P:ASCOM.DeviceInterface.ISafetyMonitor.SupportedActions"/> property.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ISafetyMonitor.SupportedActions">
	<summary>
 Returns the list of action names supported by this driver.
 </summary>
	<value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This method must return an empty arraylist if no actions are supported. Please do not throw a 
 <see cref="T:ASCOM.PropertyNotImplementedException"/>.
 <para>This is an aid to client authors and testers who would otherwise have to repeatedly poll the driver to determine its capabilities. 
 Returned action names may be in mixed case to enhance presentation but  will be recognised case insensitively in 
 the <see cref="M:ASCOM.DeviceInterface.ISafetyMonitor.Action(System.String,System.String)">Action</see> method.</para>
		<para>An array list collection has been selected as the vehicle for  action names in order to make it easier for clients to
 determine whether a particular action is supported. This is easily done through the Contains method. Since the
 collection is also ennumerable it is easy to use constructs such as For Each ... to operate on members without having to be concerned 
 about hom many members are in the collection. </para>
		<para>Collections have been used in the Telescope specification for a number of years and are known to be compatible with COM. Within .NET
 the ArrayList is the correct implementation to use as the .NET Generic methods are not compatible with COM.</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ISafetyMonitor.CommandBlind(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and does not wait for a response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ISafetyMonitor.CommandBool(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a boolean response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the interpreted boolean response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ISafetyMonitor.CommandString(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a string response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the string response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ISafetyMonitor.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.ISafetyMonitor.IsSafe">
	<summary>
 Indicates whether the monitored state is safe for use.
 </summary>
	<value>True if the state is safe, False if it is unsafe.</value>
</member><member name="T:ASCOM.DeviceInterface.ISafetyMonitor">
	<summary>
 Defines the ISafetyMonitor Interface
 </summary>
</member><member name="P:ASCOM.DeviceInterface.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:ASCOM.DeviceInterface.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:ASCOM.DeviceInterface.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:ASCOM.DeviceInterface.ITrackingRates.Item(System.Int32)">
	<summary>
 Returns a specified item from the collection
 </summary>
	<param name="index">Number of the item to return</param>
	<value>A collection of supported DriveRate values that describe the permissible values of the TrackingRate property for this telescope type.</value>
	<returns>Returns a collection of supported DriveRate values</returns>
	<remarks>This is only used by telescope interface versions 2 and 3</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITrackingRates.Count">
	<summary>
 Number of DriveRates supported by the Telescope
 </summary>
	<value>Number of DriveRates supported by the Telescope</value>
	<returns>Integer count</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.DeviceInterface.ITrackingRates.GetEnumerator">
	<summary>
 Returns an enumerator for the collection
 </summary>
	<returns>An enumerator</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.DeviceInterface.ITrackingRates.Dispose">
	<summary>
 Disposes of the TrackingRates object
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.DeviceInterface.ITrackingRates">
	<summary>
 Returns a collection of supported DriveRate values that describe the permissible values of the TrackingRate property for this telescope type.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Connected">
	<summary>
 Set True to connect to the device. Set False to disconnect from the device.
 You can also read the property to check whether it is connected.
 </summary>
	<value><c>true</c> if connected; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Description">
	<summary>
 Returns a description of the device, such as manufacturer and modelnumber. Any ASCII characters may be used. 
 </summary>
	<value>The description.</value>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.DriverInfo">
	<summary>
 Descriptive and version information about this ASCOM driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
 It is intended to display detailed information on the ASCOM driver, including version and copyright data.
 See the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Description"/> property for information on the device itself.
 To get the driver version in a parseable string, use the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.DriverVersion"/> property.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.DriverVersion">
	<summary>
 A string containing only the major and minor version of the driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
 It should not to be confused with the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.InterfaceVersion"/> property, which is the version of this specification supported by the 
 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.InterfaceVersion">
	<summary>
 The interface version number that this device supports. Should return 2 for this interface version.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read ths property.
 If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
 In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Name">
	<summary>
 The short name of the driver, for display purposes
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SetupDialog">
	<summary>
 Launches a configuration dialog box for the driver.  The call will not return
 until the user clicks OK or cancel manually.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.Action(System.String,System.String)">
	<summary>
 Invokes the specified device-specific action.
 </summary>
	<param name="ActionName">
 A well known name agreed by interested parties that represents the action to be carried out. 
 </param>
	<param name="ActionParameters">List of required parameters or an <see cref="T:System.String">Empty String</see> if none are required.
 </param>
	<returns>A string response. The meaning of returned strings is set by the driver author.</returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throws this exception if no actions are suported.</exception>
	<exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the SupportedActions method will inform clients 
 of driver capabilities, but the driver must still throw an ASCOM.ActionNotImplemented exception if it is asked to 
 perform an action that it does not support.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<example>Suppose filter wheels start to appear with automatic wheel changers; new actions could 
 be “FilterWheel:QueryWheels” and “FilterWheel:SelectWheel”. The former returning a 
 formatted list of wheel names and the second taking a wheel name and making the change, returning appropriate 
 values to indicate success or failure.
 </example>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 This method is intended for use in all current and future device types and to avoid name clashes, management of action names 
 is important from day 1. A two-part naming convention will be adopted - <b>DeviceType:UniqueActionName</b> where:
 <list type="bullet">
			<item><description>DeviceType is the same value as would be used by <see cref="P:ASCOM.Utilities.Chooser.DeviceType"/> e.g. Telescope, Camera, Switch etc.</description></item>
			<item><description>UniqueActionName is a single word, or multiple words joined by underscore characters, that sensibly describes the action to be performed.</description></item>
		</list>
		<para>
 It is recommended that UniqueActionNames should be a maximum of 16 characters for legibility.
 Should the same function and UniqueActionName be supported by more than one type of device, the reserved DeviceType of 
 “General” will be used. Action names will be case insensitive, so FilterWheel:SelectWheel, filterwheel:selectwheel 
 and FILTERWHEEL:SELECTWHEEL will all refer to the same action.</para>
		<para>The names of all supported actions must bre returned in the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.SupportedActions"/> property.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.SupportedActions">
	<summary>
 Returns the list of action names supported by this driver.
 </summary>
	<value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This method must return an empty arraylist if no actions are supported. Please do not throw a 
 <see cref="T:ASCOM.PropertyNotImplementedException"/>.
 <para>This is an aid to client authors and testers who would otherwise have to repeatedly poll the driver to determine its capabilities. 
 Returned action names may be in mixed case to enhance presentation but  will be recognised case insensitively in 
 the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Action(System.String,System.String)">Action</see> method.</para>
		<para>An array list collection has been selected as the vehicle for  action names in order to make it easier for clients to
 determine whether a particular action is supported. This is easily done through the Contains method. Since the
 collection is also ennumerable it is easy to use constructs such as For Each ... to operate on members without having to be concerned 
 about hom many members are in the collection. </para>
		<para>Collections have been used in the Telescope specification for a number of years and are known to be compatible with COM. Within .NET
 the ArrayList is the correct implementation to use as the .NET Generic methods are not compatible with COM.</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.CommandBlind(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and does not wait for a response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.CommandBool(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a boolean response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the interpreted boolean response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.CommandString(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a string response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the string response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.AbortSlew">
	<summary>
 Stops a slew in progress.
 </summary>
	<remarks>
 Effective only after a call to <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToTargetAsync"/>, <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToCoordinatesAsync(System.Double,System.Double)"/>, <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToAltAzAsync(System.Double,System.Double)"/>, or <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/>.
 Does nothing if no slew/motion is in progress. 
 Tracking is returned to its pre-slew state.
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is true. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.AlignmentMode">
	<summary>
 The alignment mode of the mount.
 </summary>
	<remarks>
 This is only available for telescope InterfaceVersions 2 and 3
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Altitude">
	<summary>
 The Altitude above the local horizon of the telescope's current position (degrees, positive up)
 </summary>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.ApertureArea">
	<summary>
 The area of the telescope's aperture, taking into account any obstructions (square meters)
 </summary>
	<remarks>
 This is only available for telescope InterfaceVersions 2 and 3
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.ApertureDiameter">
	<summary>
 The telescope's effective aperture diameter (meters)
 </summary>
	<remarks>
 This is only available for telescope InterfaceVersions 2 and 3
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.AtHome">
	<summary>
 True if the telescope is stopped in the Home position. Set only following a <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.FindHome"></see> operation,
  and reset with any slew operation. This property must be False if the telescope does not support homing. 
 </summary>
	<remarks>
 This is only available for telescope InterfaceVersions 2 and 3
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark">
	<summary>
 True if the telescope has been put into the parked state by the seee <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Park"/> method. Set False by calling the Unpark() method.
 </summary>
	<remarks>
		<para>AtPark is True when the telescope is in the parked state. This is achieved by calling the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Park"/> method. When AtPark is true, 
 the telescope movement is stopped (or restricted to a small safe range of movement) and all calls that would cause telescope 
 movement (e.g. slewing, changing Tracking state) must not do so, and must raise an error.</para>
		<para>The telescope is taken out of parked state by calling the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Unpark"/> method. If the telescope cannot be parked, 
 then AtPark must always return False.</para>
		<para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.AxisRates(ASCOM.DeviceInterface.TelescopeAxes)">
	<summary>
 Determine the rates at which the telescope may be moved about the specified axis by the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method.
 </summary>
	<param name="Axis">The axis about which rate information is desired (TelescopeAxes value)</param>
	<returns>Collection of <see cref="T:ASCOM.DeviceInterface.IRate"/> rate objects</returns>
	<remarks>
 See the description of <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> for more information. This method must return an empty collection if <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> is not supported. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
		<para>
 Please note that the rate objects must contain absolute non-negative values only. Applications determine the direction by applying a
 positive or negative sign to the rates provided. This obviates the need for the driver to to present a duplicate set of negative rates 
 as well as the positive rates.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Azimuth">
	<summary>
 The azimuth at the local horizon of the telescope's current position (degrees, North-referenced, positive East/clockwise).
 </summary>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanFindHome">
	<summary>
 True if this telescope is capable of programmed finding its home position (<see cref="M:ASCOM.DeviceInterface.ITelescopeV3.FindHome"/> method).
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.CanMoveAxis(ASCOM.DeviceInterface.TelescopeAxes)">
	<summary>
 True if this telescope can move the requested axis
 </summary>
	<remarks>
 This is only available for telescope InterfaceVersions 2 and 3
 </remarks>
	<param name="Axis">Primary, Secondary or Tertiary axis</param>
	<returns>Boolean indicating can or can not move the requested axis</returns>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanPark">
	<summary>
 True if this telescope is capable of programmed parking (<see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Park"/>method)
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanPulseGuide">
	<summary>
 True if this telescope is capable of software-pulsed guiding (via the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)"/> method)
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetDeclinationRate">
	<summary>
 True if the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.DeclinationRate"/> property can be changed to provide offset tracking in the declination axis.
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetGuideRates">
	<summary>
 True if the guide rate properties used for <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)"/> can ba adjusted.
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetPark">
	<summary>
 True if this telescope is capable of programmed setting of its park position (<see cref="M:ASCOM.DeviceInterface.ITelescopeV3.SetPark"/> method)
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetPierSide">
	<summary>
 True if the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.SideOfPier"/> property can be set, meaning that the mount can be forced to flip.
 </summary>
	<remarks>
 This will always return False for non-German-equatorial mounts that do not have to be flipped. 
 May raise an error if the telescope is not connected. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetRightAscensionRate">
	<summary>
 True if the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscensionRate"/> property can be changed to provide offset tracking in the right ascension axis.
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetTracking">
	<summary>
 True if the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> property can be changed, turning telescope sidereal tracking on and off.
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlew">
	<summary>
 True if this telescope is capable of programmed slewing (synchronous or asynchronous) to equatorial coordinates
 </summary>
	<remarks>
 If this is true, then only the synchronous equatorial slewing methods are guaranteed to be supported.
 See the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAsync"/> property for the asynchronous slewing capability flag. 
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAltAz">
	<summary>
 True if this telescope is capable of programmed slewing (synchronous or asynchronous) to local horizontal coordinates
 </summary>
	<remarks>
 If this is true, then only the synchronous local horizontal slewing methods are guaranteed to be supported.
 See the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAltAzAsync"/> property for the asynchronous slewing capability flag. 
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAltAzAsync">
	<summary>
 True if this telescope is capable of programmed asynchronous slewing to local horizontal coordinates
 </summary>
	<remarks>
 This indicates the the asynchronous local horizontal slewing methods are supported.
 If this is True, then <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAltAz"/> will also be true. 
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAsync">
	<summary>
 True if this telescope is capable of programmed asynchronous slewing to equatorial coordinates.
 </summary>
	<remarks>
 This indicates the the asynchronous equatorial slewing methods are supported.
 If this is True, then <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlew"/> will also be true.
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSync">
	<summary>
 True if this telescope is capable of programmed synching to equatorial coordinates.
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanSyncAltAz">
	<summary>
 True if this telescope is capable of programmed synching to local horizontal coordinates
 </summary>
	<remarks>
 May raise an error if the telescope is not connected. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.CanUnpark">
	<summary>
 True if this telescope is capable of programmed unparking (<see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Unpark"/> method).
 </summary>
	<remarks>
 If this is true, then <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanPark"/> will also be true. May raise an error if the telescope is not connected.
 May raise an error if the telescope is not connected. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Declination">
	<summary>
 The declination (degrees) of the telescope's current equatorial coordinates, in the coordinate system given by the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.EquatorialSystem"/> property.
 Reading the property will raise an error if the value is unavailable. 
 </summary>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.DeclinationRate">
	<summary>
 The declination tracking rate (arcseconds per second, default = 0.0)
 </summary>
	<remarks>
 This property, together with <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscensionRate"/>, provides support for "offset tracking".
 Offset tracking is used primarily for tracking objects that move relatively slowly against the equatorial coordinate system.
 It also may be used by a software guiding system that controls rates instead of using the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method. 
 <para>
			<b>NOTES:</b>
			<list type="bullet">
				<list></list>
				<item><description>The property value represents an offset from zero motion.</description></item>
				<item><description>If <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetDeclinationRate"/> is False, this property will always return 0.</description></item>
				<item><description>To discover whether this feature is supported, test the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetDeclinationRate"/> property.</description></item>
				<item><description>The supported range of this property is telescope specific, however, if this feature is supported,
 it can be expected that the range is sufficient to allow correction of guiding errors caused by moderate misalignment 
 and periodic error.</description></item>
				<item><description>If this property is non-zero when an equatorial slew is initiated, the telescope should continue to update the slew 
 destination coordinates at the given offset rate.</description></item>
				<item><description>This will allow precise slews to a fast-moving target with a slow-slewing telescope.</description></item>
				<item><description>When the slew completes, the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/> properties should reflect the final (adjusted) destination.</description></item>
			</list>
		</para>
		<para>
This is not a required feature of this specification, however it is desirable. 
 </para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.DestinationSideOfPier(System.Double,System.Double)">
	<summary>
 Predict side of pier for German equatorial mounts
 </summary>
	<remarks>
 This is only available for telescope InterfaceVersions 2 and 3
 </remarks>
	<param name="RightAscension">The destination right ascension (hours).</param>
	<param name="Declination">The destination declination (degrees, positive North).</param>
	<returns>The side of the pier on which the telescope would be on if a slew to the given equatorial coordinates is performed at the current instant of time.</returns>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.DoesRefraction">
	<summary>
 True if the telescope or driver applies atmospheric refraction to coordinates.
 </summary>
	<remarks>
 If this property is True, the coordinates sent to, and retrieved from, the telescope are unrefracted. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
		<para>
			<b>NOTES:</b>
			<list type="bullet">
				<item><description>If the driver does not know whether the attached telescope does its own refraction, and if the driver does not itself calculate 
 refraction, this property (if implemented) must raise an error when read.</description></item>
				<item><description>Writing to this property is optional. Often, a telescope (or its driver) calculates refraction using standard atmospheric parameters.</description></item>
				<item><description>If the client wishes to calculate a more accurate refraction, then this property could be set to False and these 
 client-refracted coordinates used.</description></item>
				<item><description>If disabling the telescope or driver's refraction is not supported, the driver must raise an error when an attempt to set 
 this property to False is made.</description></item>
				<item><description>Setting this property to True for a telescope or driver that does refraction, or to False for a telescope or driver that 
 does not do refraction, shall not raise an error. It shall have no effect.</description></item>
			</list>
		</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.EquatorialSystem">
	<summary>
 Equatorial coordinate system used by this telescope.
 </summary>
	<remarks>
 Most amateur telescopes use local topocentric coordinates.
 This coordinate system is simply the apparent position in the sky
 (possibly uncorrected for atmospheric refraction) for "here and now",
 thus these are the coordinates that one would use with digital setting
 circles and most amateur scopes. More sophisticated telescopes use one of
 the standard reference systems established by professional astronomers.
 The most common is the Julian Epoch 2000 (J2000). 
 These instruments apply corrections for precession,
 nutation, abberration, etc. to adjust the coordinates from the standard system
 to the pointing direction for the time and location of "here and now". 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.FindHome">
	<summary>
 Locates the telescope's "home" position (synchronous)
 </summary>
	<remarks>
 Returns only after the home position has been found.
 At this point the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtHome"/> property will be True.
 Raises an error if there is a problem. 
 Raises an error if AtPark is true. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.FocalLength">
	<summary>
 The telescope's focal length, meters
 </summary>
	<remarks>
 This property may be used by clients to calculate telescope field of view and plate scale when combined with detector pixel size and geometry. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.GuideRateDeclination">
	<summary>
 The current Declination movement rate offset for telescope guiding (degrees/sec)
 </summary>
	<remarks>
 This is the rate for both hardware/relay guiding and the PulseGuide() method. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
		<para>
			<b>NOTES:</b>
			<list type="bullet">
				<item><description>To discover whether this feature is supported, test the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetGuideRates"/> property.</description></item>
				<item><description>The supported range of this property is telescope specific, however,
 if this feature is supported, it can be expected that the range is sufficient to
 allow correction of guiding errors caused by moderate misalignment and periodic error.</description></item>
				<item><description>If a telescope does not support separate guiding rates in Right Ascension and Declination,
 then it is permissible for <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.GuideRateRightAscension"/> and GuideRateDeclination to be tied together.
 In this case, changing one of the two properties will cause a change in the other.</description></item>
				<item><description>Mounts must start up with a known or default declination guide rate,
 and this property must return that known/default guide rate until changed.</description></item>
			</list>
		</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.GuideRateRightAscension">
	<summary>
 The current Right Ascension movement rate offset for telescope guiding (degrees/sec)
 </summary>
	<remarks>
 This is the rate for both hardware/relay guiding and the PulseGuide() method. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
		<para>
			<b>NOTES:</b>
			<list type="bullet">
				<item><description>To discover whether this feature is supported, test the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetGuideRates"/> property.</description></item>
				<item><description>The supported range of this property is telescope specific, however, if this feature is supported, 
 it can be expected that the range is sufficient to allow correction of guiding errors caused by moderate
 misalignment and periodic error.</description></item>
				<item><description>If a telescope does not support separate guiding rates in Right Ascension and Declination,
 then it is permissible for GuideRateRightAscension and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.GuideRateDeclination"/> to be tied together. 
 In this case, changing one of the two properties will cause a change in the other.</description></item>
				<item><description> Mounts must start up with a known or default right ascension guide rate,
 and this property must return that known/default guide rate until changed.</description></item>
			</list>
		</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.IsPulseGuiding">
	<summary>
 True if a <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)"/> command is in progress, False otherwise
 </summary>
	<remarks>
 Raises an error if the value of the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanPulseGuide"/> property is false
 (the driver does not support the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)"/> method). 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)">
	<summary>
 Move the telescope in one axis at the given rate.
 </summary>
	<remarks>
 This method supports control of the mount about its mechanical axes.
 The telescope will start moving at the specified rate about the specified axis and continue indefinitely.
 This method can be called for each axis separately, and have them all operate concurrently at separate rates of motion. 
 Set the rate for an axis to zero to stop the motionabout that axis.
 Tracking motion (if enabled, see note below) is suspended during this mode of operation. 
 <para>
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is true. 
 This must be implemented for the if the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.CanMoveAxis(ASCOM.DeviceInterface.TelescopeAxes)"/> property returns True for the given axis.</para>
		<para>This is only available for telescope InterfaceVersions 2 and 3</para>
		<para>
			<b>NOTES:</b>
			<list type="bullet">
				<item><description>The movement rate must be within the value(s) obtained from a <see cref="T:ASCOM.DeviceInterface.IRate"/> object in the 
 the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.AxisRates(ASCOM.DeviceInterface.TelescopeAxes)"/> collection. This is a signed value with negative rates moving in the oposite direction to positive rates.</description></item>
				<item><description>The values specified in <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.AxisRates(ASCOM.DeviceInterface.TelescopeAxes)"/> are absolute, unsigned values and apply to both directions, 
 determined by the sign used in this command.</description></item>
				<item><description>The value of <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing"/> must be True if the telescope is moving 
 about any of its axes as a result of this method being called. 
 This can be used to simulate a handbox by initiating motion with the
 MouseDown event and stopping the motion with the MouseUp event.</description></item>
				<item><description>When the motion is stopped the scope will be set to the previous 
 <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TrackingRate"/> or to no movement, depending on the state of the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> property.</description></item>
				<item><description>It may be possible to implement satellite tracking by using the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method to move the 
 scope in the required manner to track a satellite.</description></item>
			</list>
		</para>
	</remarks>
	<param name="Axis">The physical axis about which movement is desired</param>
	<param name="Rate">The rate of motion (deg/sec) about the specified axis</param>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.Park">
	<summary>
 Move the telescope to its park position, stop all motion (or restrict to a small safe range), and set <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> to True.
 </summary>
	<remarks>
 Raises an error if there is a problem communicating with the telescope or if parking fails. 
 Parking should put the telescope into a state where its pointing accuracy 
 will not be lost if it is power-cycled (without moving it).
 Some telescopes must be power-cycled before unparking.
 Others may be unparked by simply calling the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Unpark"/> method.
 Calling this with <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> = True does nothing (harmless) 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">
	<summary>
 Moves the scope in the given direction for the given interval or time at 
 the rate given by the corresponding guide rate property 
 </summary>
	<remarks>
 This method returns immediately if the hardware is capable of back-to-back moves,
 i.e. dual-axis moves. For hardware not having the dual-axis capability,
 the method returns only after the move has completed. 
 <para>
			<b>NOTES:</b>
			<list type="bullet">
				<item><description>Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is true.</description></item>
				<item><description>The <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.IsPulseGuiding"/> property must be be True during pulse-guiding.</description></item>
				<item><description>The rate of motion for movements about the right ascension axis is 
 specified by the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.GuideRateRightAscension"/> property. The rate of motion
 for movements about the declination axis is specified by the 
 <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.GuideRateDeclination"/> property. These two rates may be tied together
 into a single rate, depending on the driver's implementation
 and the capabilities of the telescope.</description></item>
			</list>
		</para>
	</remarks>
	<param name="Direction">The direction in which the guide-rate motion is to be made</param>
	<param name="Duration">The duration of the guide-rate motion (milliseconds)</param>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscension">
	<summary>
 The right ascension (hours) of the telescope's current equatorial coordinates,
 in the coordinate system given by the EquatorialSystem property
 </summary>
	<remarks>
 Reading the property will raise an error if the value is unavailable. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscensionRate">
	<summary>
 The right ascension tracking rate offset from sidereal (seconds per sidereal second, default = 0.0)
 </summary>
	<remarks>
 This property, together with <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.DeclinationRate"/>, provides support for "offset tracking".
 Offset tracking is used primarily for tracking objects that move relatively slowly
 against the equatorial coordinate system. It also may be used by a software guiding
 system that controls rates instead of using the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method.
 <para>
			<b>NOTES:</b>
 The property value represents an offset from the currently selected <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TrackingRate"/>. 
 <list type="bullet">
				<item><description>If this property is zero, tracking will be at the selected <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TrackingRate"/>.</description></item>
				<item><description>If <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetRightAscensionRate"/> is False, this property must always return 0.</description></item> 
 To discover whether this feature is supported, test the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetRightAscensionRate"/>property. 
 <item><description>The property value is in in seconds of right ascension per sidereal second.</description></item>
				<item><description>To convert a given rate in (the more common) units of sidereal seconds
 per UTC (clock) second, multiply the value by 0.9972695677 
 (the number of UTC seconds in a sidereal second) then set the property.
 Please note that these units were chosen for the Telescope V1 standard,
 and in retrospect, this was an unfortunate choice.
 However, to maintain backwards compatibility, the units cannot be changed.
 A simple multiplication is all that's needed, as noted. 
 The supported range of this property is telescope specific, however,
 if this feature is supported, it can be expected that the range
 is sufficient to allow correction of guiding errors
 caused by moderate misalignment and periodic error. </description></item>
				<item><description>If this property is non-zero when an equatorial slew is initiated,
 the telescope should continue to update the slew destination coordinates 
 at the given offset rate. This will allow precise slews to a fast-moving 
 target with a slow-slewing telescope. When the slew completes, 
 the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/> properties should
 reflect the final (adjusted) destination. This is not a required
 feature of this specification, however it is desirable. </description></item>
				<item><description>Use the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> property to enable and disable sidereal tracking (if supported). </description></item>
			</list>
		</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SetPark">
	<summary>
 Sets the telescope's park position to be its current position.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.SideOfPier">
	<summary>
 Indicates the pointing state of the mount.
 </summary>
	<remarks>
		<para>For historical reasons, this property's name does not reflect its true meaning. The name will not be changed (so as to preserve 
 compatibility), but the meaning has since become clear. All conventional mounts have two pointing states for a given equatorial (sky) position. 
 Mechanical limitations often make it impossible for the mount to position the optics at given HA/Dec in one of the two pointing 
 states, but there are places where the same point can be reached sensibly in both pointing states (e.g. near the pole and 
 close to the meridian). In order to understand these pointing states, consider the following (thanks to Patrick Wallace for this info):</para>
		<para>All conventional telescope mounts have two axes nominally at right angles. For an equatorial, the longitude axis is mechanical 
 hour angle and the latitude axis is mechanical declination. Sky coordinates and mechanical coordinates are two completely separate arenas. 
 This becomes rather more obvious if your mount is an altaz, but it's still true for an equatorial. Both mount axes can in principle 
 move over a range of 360 deg. This is distinct from sky HA/Dec, where Dec is limited to a 180 deg range (+90 to -90).  Apart from 
 practical limitations, any point in the sky can be seen in two mechanical orientations. To get from one to the other the HA axis 
 is moved 180 deg and the Dec axis is moved through the pole a distance twice the sky codeclination (90 - sky declination).</para>
		<para>Mechanical zero HA/Dec will be one of the two ways of pointing at the intersection of the celestial equator and the local meridian. 
 Choose one, and move your scope there. Once you're there, consider the two mechanical encoders zeroed. The two pointing states are, then:
 <list type="table">
				<item><term><b>Normal</b></term><description>Where the mechanical Dec is in the range -90 deg to +90 deg</description></item>
				<item><term><b>Beyond the pole</b></term><description>Where the mechanical Dec is in the range -180 deg to -90 deg or +90 deg to +180 deg.</description></item>
			</list>
		</para>
		<para>"Side of pier" is a "consequence" of the former definition, not something fundamental. 
 Apart from mechanical interference, the telescope can move from one side of the pier to the other without the mechanical Dec 
 having changed: you could track Polaris forever with the telescope moving from west of pier to east of pier or vice versa every 12h. 
 Thus, "side of pier" is, in general, not a useful term (except perhaps in a loose, descriptive, explanatory sense). 
 All this applies to a fork mount just as much as to a GEM, and it would be wrong to make the "beyond pole" state illegal for the 
 former. Your mount may not be able to get there if your camera hits the fork, but it's possible on some mounts. Whether this is useful 
 depends on whether you're in Hawaii or Finland.</para>
		<para>To first order, the relationship between sky and mechanical HA/Dec is as follows:</para>
		<para><b>Normal state:</b>
			<list type="bullet">
				<item><description>HA_sky  = HA_mech</description></item>
				<item><description>Dec_sky = Dec_mech</description></item>
			</list>
		</para>
		<para><b>Beyond the pole</b>
			<list type="bullet">
				<item><description>HA_sky  = HA_mech + 12h, expressed in range ± 12h</description></item>
				<item><description>Dec_sky = 180d - Dec_mech, expressed in range ± 90d</description></item>
			</list>
		</para>
		<para>Astronomy software often needs to know which which pointing state the mount is in. Examples include setting guiding polarities 
 and calculating dome opening azimuth/altitude. The meaning of the SideOfPier property, then is:
 <list type="table">
				<item><term><b>pierEast</b></term><description>Normal pointing state</description></item>
				<item><term><b>pierWest</b></term><description>Beyond the pole pointing state</description></item>
			</list>
		</para>
		<para>If the mount hardware reports neither the true pointing state (or equivalent) nor the mechanical declination axis position 
 (which varies from -180 to +180), a driver cannot calculate the pointing state, and *must not* implement SideOfPier.
 If the mount hardware reports only the mechanical declination axis position (-180 to +180) then a driver can calculate SideOfPier as follows:
 <list type="bullet">
				<item><description>pierEast = abs(mechanical dec) &lt;= 90 deg</description></item>
				<item><description>pierWest = abs(mechanical Dec) &gt; 90 deg</description></item>
			</list>
		</para>
		<para>It is allowed (though not required) that this property may be written to force the mount to flip. Doing so, however, may change 
 the right ascension of the telescope. During flipping, Telescope.Slewing must return True.</para>
		<para>This property is only available in telescope InterfaceVersions 2 and 3.</para>
		<para><b>Pointing State and Side of Pier - Help for Driver Developers</b></para>
		<para>A further document, "Pointing State and Side of Pier", is installed in the Developer Documentation folder by the ASCOM Developer 
 Components installer. This further explains the pointing state concept and includes diagrams illustrating how it relates 
 to physical side of pier for German equatorial telescopes. It also includes details of the tests performed by Conform to determine whether 
 the driver correctly reports the pointing state as defined above.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.SiderealTime">
	<summary>
 The local apparent sidereal time from the telescope's internal clock (hours, sidereal)
 </summary>
	<remarks>
 It is required for a driver to calculate this from the system clock if the telescope 
 has no accessible source of sidereal time. Local Apparent Sidereal Time is the sidereal 
 time used for pointing telescopes, and thus must be calculated from the Greenwich Mean
 Sidereal time, longitude, nutation in longitude and true ecliptic obliquity. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.SiteElevation">
	<summary>
 The elevation above mean sea level (meters) of the site at which the telescope is located
 </summary>
	<remarks>
 Setting this property will raise an error if the given value is outside the range -300 through +10000 metres.
 Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.SiteLatitude">
	<summary>
 The geodetic(map) latitude (degrees, positive North, WGS84) of the site at which the telescope is located.
 </summary>
	<remarks>
 Setting this property will raise an error if the given value is outside the range -90 to +90 degrees.
 Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.SiteLongitude">
	<summary>
 The longitude (degrees, positive East, WGS84) of the site at which the telescope is located.
 </summary>
	<remarks>
 Setting this property will raise an error if the given value is outside the range -180 to +180 degrees.
 Reading the property will raise an error if the value has never been set or is otherwise unavailable.
 Note that West is negative! 
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing">
	<summary>
 True if telescope is currently moving in response to one of the
 Slew methods or the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method, False at all other times.
 </summary>
	<remarks>
 Reading the property will raise an error if the value is unavailable.
 If the telescope is not capable of asynchronous slewing,
 this property will always be False. 
 The definition of "slewing" excludes motion caused by sidereal tracking,
 <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see>, <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscensionRate"/>, and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.DeclinationRate"/>.
 It reflects only motion caused by one of the Slew commands, 
 flipping caused by changing the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.SideOfPier"/> property, or <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/>. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.SlewSettleTime">
	<summary>
 Specifies a post-slew settling time (sec.).
 </summary>
	<remarks>
 Adds additional time to slew operations. Slewing methods will not return, 
 and the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing"/> property will not become False, until the slew completes and the SlewSettleTime has elapsed.
 This feature (if supported) may be used with mounts that require extra settling time after a slew. 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToAltAz(System.Double,System.Double)">
	<summary>
 Move the telescope to the given local horizontal coordinates, return when slew is complete
 </summary>
	<remarks>
 This Method must be implemented if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAltAz"/> returns True.
 Raises an error if the slew fails. 
 The slew may fail if the target coordinates are beyond limits imposed within the driver component.
 Such limits include mechanical constraints imposed by the mount or attached instruments,
 building or dome enclosure restrictions, etc.
 <para>
 The <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/> properties are not changed by this method. 
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is True. 
 This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
	<param name="Azimuth">Target azimuth (degrees, North-referenced, positive East/clockwise).</param>
	<param name="Altitude">Target altitude (degrees, positive up)</param>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToAltAzAsync(System.Double,System.Double)">
	<summary>
 This Method must be implemented if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAltAzAsync"/> returns True.
 </summary>
	<remarks>
 This method should only be implemented if the properties <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Altitude"/>, <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Azimuth"/>,
 <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscension"/>, <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Declination"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing"/> can be read while the scope is slewing.
 Raises an error if starting the slew fails. Returns immediately after starting the slew.
 The client may monitor the progress of the slew by reading the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Azimuth"/>, <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Altitude"/>,
 and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing"/> properties during the slew. When the slew completes, Slewing becomes False. 
 The slew may fail if the target coordinates are beyond limits imposed within the driver component.
 Such limits include mechanical constraints imposed by the mount or attached instruments,
 building or dome enclosure restrictions, etc. 
 The <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/> properties are not changed by this method. 
 <para>
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is True.</para>
		<para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
	<param name="Azimuth">Azimuth to which to move</param>
	<param name="Altitude">Altitude to which to move to</param>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToCoordinates(System.Double,System.Double)">
	<summary>
 Move the telescope to the given equatorial coordinates, return when slew is complete
 </summary>
	<remarks>
 This Method must be implemented if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlew"/> returns True. Raises an error if the slew fails. 
 The slew may fail if the target coordinates are beyond limits imposed within the driver component.
 Such limits include mechanical constraints imposed by the mount or attached instruments,
 building or dome enclosure restrictions, etc. The target coordinates are copied to
 <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/> whether or not the slew succeeds. 
 <para>Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is False.</para>
	</remarks>
	<param name="RightAscension">The destination right ascension (hours). Copied to <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/>.</param>
	<param name="Declination">The destination declination (degrees, positive North). Copied to <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/>.</param>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToCoordinatesAsync(System.Double,System.Double)">
	<summary>
 Move the telescope to the given equatorial coordinates, return immediately after starting the slew.
 </summary>
	<remarks>
 This method must be implemented if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAsync"/> returns True. Raises an error if starting the slew failed. 
 Returns immediately after starting the slew. The client may monitor the progress of the slew by reading
 the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscension"/>, <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Declination"/>, and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing"/> properties during the slew. When the slew completes,
 <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing"/> becomes False. The slew may fail to start if the target coordinates are beyond limits
 imposed within the driver component. Such limits include mechanical constraints imposed
 by the mount or attached instruments, building or dome enclosure restrictions, etc. 
 <para>The target coordinates are copied to <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/>
 whether or not the slew succeeds. 
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is False.</para>
	</remarks>
	<param name="RightAscension">The destination right ascension (hours). Copied to <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/>.</param>
	<param name="Declination">The destination declination (degrees, positive North). Copied to <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/>.</param>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToTarget">
	<summary>
 Move the telescope to the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/> coordinates, return when slew complete.
 </summary>
	<remarks>
 This Method must be implemented if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlew"/> returns True. Raises an error if the slew fails. 
 The slew may fail if the target coordinates are beyond limits imposed within the driver component.
 Such limits include mechanical constraints imposed by the mount or attached
 instruments, building or dome enclosure restrictions, etc. 
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is False. 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SlewToTargetAsync">
	<summary>
 Move the telescope to the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/>  coordinates,
 returns immediately after starting the slew.
 </summary>
	<remarks>
 This Method must be implemented if  <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSlewAsync"/> returns True.
 Raises an error if starting the slew failed. 
 Returns immediately after starting the slew. The client may
 monitor the progress of the slew by reading the RightAscension, Declination,
 and Slewing properties during the slew. When the slew completes,  <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Slewing"/> becomes False. 
 The slew may fail to start if the target coordinates are beyond limits imposed within 
 the driver component. Such limits include mechanical constraints imposed by the mount
 or attached instruments, building or dome enclosure restrictions, etc. 
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is False. 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SyncToAltAz(System.Double,System.Double)">
	<summary>
 Matches the scope's local horizontal coordinates to the given local horizontal coordinates.
 </summary>
	<remarks>
 This must be implemented if the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSyncAltAz"/> property is True. Raises an error if matching fails. 
 <para>Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is True.</para>
		<para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
	<param name="Azimuth">Target azimuth (degrees, North-referenced, positive East/clockwise)</param>
	<param name="Altitude">Target altitude (degrees, positive up)</param>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SyncToCoordinates(System.Double,System.Double)">
	<summary>
 Matches the scope's equatorial coordinates to the given equatorial coordinates.
 </summary>
	<param name="RightAscension">The corrected right ascension (hours). Copied to the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension"/> property.</param>
	<param name="Declination">The corrected declination (degrees, positive North). Copied to the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination"/> property.</param>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.SyncToTarget">
	<summary>
 Matches the scope's equatorial coordinates to the given equatorial coordinates.
 </summary>
	<remarks>
 This must be implemented if the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSync"/> property is True. Raises an error if matching fails. 
 Raises an error if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> AtPark is True, or if <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> is False. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.TargetDeclination">
	<summary>
 The declination (degrees, positive North) for the target of an equatorial slew or sync operation
 </summary>
	<remarks>
 Setting this property will raise an error if the given value is outside the range -90 to +90 degrees.
 Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.TargetRightAscension">
	<summary>
 The right ascension (hours) for the target of an equatorial slew or sync operation
 </summary>
	<remarks>
 Setting this property will raise an error if the given value is outside the range 0 to 24 hours.
 Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking">
	<summary>
 The state of the telescope's sidereal tracking drive.
 </summary>
	<remarks>
 Changing the value of this property will turn the sidereal drive on and off.
 However, some telescopes may not support changing the value of this property
 and thus may not support turning tracking on and off.
 See the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.CanSetTracking"/> property. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.TrackingRate">
	<summary>
 The current tracking rate of the telescope's sidereal drive
 </summary>
	<remarks>
 Supported rates (one of the <see cref="T:ASCOM.DeviceInterface.DriveRates"/>  values) are contained within the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TrackingRates"/> collection.
 Values assigned to TrackingRate must be one of these supported rates. 
 If an unsupported value is assigned to this property, it will raise an error. 
 The currently selected tracking rate be further adjusted via the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.RightAscensionRate"/> 
 and <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.DeclinationRate"/> properties. These rate offsets are applied to the currently 
 selected tracking rate. Mounts must start up with a known or default tracking rate,
 and this property must return that known/default tracking rate until changed.
 <para>If the mount's current tracking rate cannot be determined (for example, 
 it is a write-only property of the mount's protocol), 
 it is permitted for the driver to force and report a default rate on connect.
 In this case, the preferred default is Sidereal rate.</para>
		<para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.TrackingRates">
	<summary>
 Returns a collection of supported <see cref="T:ASCOM.DeviceInterface.DriveRates"/> values that describe the permissible
 values of the <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.TrackingRate"/> property for this telescope type.
 </summary>
	<remarks>
 At a minimum, this must contain an item for <see cref="F:ASCOM.DeviceInterface.DriveRates.driveSidereal"/>.
 <para>This is only available for telescope InterfaceVersions 2 and 3</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ITelescopeV3.Unpark">
	<summary>
 Takes telescope out of the Parked state.
 </summary>
	<remarks>
 The state of <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.Tracking"/> after unparking is undetermined. 
 Valid only after <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.Park"/>.
 Applications must check and change Tracking as needed after unparking. 
 Raises an error if unparking fails. Calling this with <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.AtPark"/> = False does nothing (harmless) 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ITelescopeV3.UTCDate">
	<summary>
 The UTC date/time of the telescope's internal clock
 </summary>
	<remarks>
 The driver must calculate this from the system clock if the telescope has no accessible
 source of UTC time. In this case, the property must not be writeable 
 (this would change the system clock!) and will instead raise an error.
 However, it is permitted to change the telescope's internal UTC clock 
 if it is being used for this property. This allows clients to adjust 
 the telescope's UTC clock as needed for accuracy. Reading the property
 will raise an error if the value has never been set or is otherwise unavailable. 
 </remarks>
</member><member name="T:ASCOM.DeviceInterface.ITelescopeV3">
	<summary>
 Defines the ITelescope Interface
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.Connected">
	<summary>
 Set True to connect to the device. Set False to disconnect from the device.
 You can also read the property to check whether it is connected.
 </summary>
	<value><c>true</c> if connected; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.Description">
	<summary>
 Returns a description of the device, such as manufacturer and modelnumber. Any ASCII characters may be used. 
 </summary>
	<value>The description.</value>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.DriverInfo">
	<summary>
 Descriptive and version information about this ASCOM driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
 It is intended to display detailed information on the ASCOM driver, including version and copyright data.
 See the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Description"/> property for information on the device itself.
 To get the driver version in a parseable string, use the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.DriverVersion"/> property.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.DriverVersion">
	<summary>
 A string containing only the major and minor version of the driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
 It should not to be confused with the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.InterfaceVersion"/> property, which is the version of this specification supported by the 
 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.InterfaceVersion">
	<summary>
 The interface version number that this device supports. Should return 2 for this interface version.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read ths property.
 If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
 In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.Name">
	<summary>
 The short name of the driver, for display purposes
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.SetupDialog">
	<summary>
 Launches a configuration dialog box for the driver.  The call will not return
 until the user clicks OK or cancel manually.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.Action(System.String,System.String)">
	<summary>
 Invokes the specified device-specific action.
 </summary>
	<param name="ActionName">
 A well known name agreed by interested parties that represents the action to be carried out. 
 </param>
	<param name="ActionParameters">List of required parameters or an <see cref="T:System.String">Empty String</see> if none are required.
 </param>
	<returns>A string response. The meaning of returned strings is set by the driver author.</returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throws this exception if no actions are suported.</exception>
	<exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the SupportedActions method will inform clients 
 of driver capabilities, but the driver must still throw an ASCOM.ActionNotImplemented exception if it is asked to 
 perform an action that it does not support.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<example>Suppose filter wheels start to appear with automatic wheel changers; new actions could 
 be “FilterWheel:QueryWheels” and “FilterWheel:SelectWheel”. The former returning a 
 formatted list of wheel names and the second taking a wheel name and making the change, returning appropriate 
 values to indicate success or failure.
 </example>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 This method is intended for use in all current and future device types and to avoid name clashes, management of action names 
 is important from day 1. A two-part naming convention will be adopted - <b>DeviceType:UniqueActionName</b> where:
 <list type="bullet">
			<item><description>DeviceType is the same value as would be used by <see cref="P:ASCOM.Utilities.Chooser.DeviceType"/> e.g. Telescope, Camera, Switch etc.</description></item>
			<item><description>UniqueActionName is a single word, or multiple words joined by underscore characters, that sensibly describes the action to be performed.</description></item>
		</list>
		<para>
 It is recommended that UniqueActionNames should be a maximum of 16 characters for legibility.
 Should the same function and UniqueActionName be supported by more than one type of device, the reserved DeviceType of 
 “General” will be used. Action names will be case insensitive, so FilterWheel:SelectWheel, filterwheel:selectwheel 
 and FILTERWHEEL:SELECTWHEEL will all refer to the same action.</para>
		<para>The names of all supported actions must bre returned in the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.SupportedActions"/> property.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.SupportedActions">
	<summary>
 Returns the list of action names supported by this driver.
 </summary>
	<value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This method must return an empty arraylist if no actions are supported. Please do not throw a 
 <see cref="T:ASCOM.PropertyNotImplementedException"/>.
 <para>This is an aid to client authors and testers who would otherwise have to repeatedly poll the driver to determine its capabilities. 
 Returned action names may be in mixed case to enhance presentation but  will be recognised case insensitively in 
 the <see cref="M:ASCOM.DeviceInterface.IRotatorV2.Action(System.String,System.String)">Action</see> method.</para>
		<para>An array list collection has been selected as the vehicle for  action names in order to make it easier for clients to
 determine whether a particular action is supported. This is easily done through the Contains method. Since the
 collection is also ennumerable it is easy to use constructs such as For Each ... to operate on members without having to be concerned 
 about hom many members are in the collection. </para>
		<para>Collections have been used in the Telescope specification for a number of years and are known to be compatible with COM. Within .NET
 the ArrayList is the correct implementation to use as the .NET Generic methods are not compatible with COM.</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.CommandBlind(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and does not wait for a response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.CommandBool(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a boolean response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the interpreted boolean response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.CommandString(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a string response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the string response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.CanReverse">
	<summary>
 Indicates whether the Rotator supports the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Reverse"/> method.
 </summary>
	<returns>
 True if the Rotator supports the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Reverse"/> method.
 </returns>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.Halt">
	<summary>
 Immediately stop any Rotator motion due to a previous <see cref="M:ASCOM.DeviceInterface.IRotatorV2.Move(System.Single)">Move</see> or <see cref="M:ASCOM.DeviceInterface.IRotatorV2.MoveAbsolute(System.Single)">MoveAbsolute</see> method call.
 </summary>
	<remarks>This is an optional method. Raises an error if not supported.</remarks>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throw a MethodNotImplementedException if the rotator cannot halt.</exception>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.IsMoving">
	<summary>
 Indicates whether the rotator is currently moving
 </summary>
	<returns>True if the Rotator is moving to a new position. False if the Rotator is stationary.</returns>
	<remarks>Rotation is asynchronous, that is, when the <see cref="M:ASCOM.DeviceInterface.IRotatorV2.Move(System.Single)">Move</see> method is called, it starts the rotation, then returns 
 immediately. During rotation, <see cref="P:ASCOM.DeviceInterface.IRotatorV2.IsMoving"/> must be True, else it must be False.</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.Move(System.Single)">
	<summary>
 Causes the rotator to move Position degrees relative to the current <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Position"/> value.
 </summary>
	<param name="Position">Relative position to move in degrees from current <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Position"/>.</param>
	<remarks>Calling <see cref="M:ASCOM.DeviceInterface.IRotatorV2.Move(System.Single)">Move</see> causes the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.TargetPosition"/> property to change to the sum of the current angular position 
 and the value of the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Position"/> parameter (modulo 360 degrees), then starts rotation to <see cref="P:ASCOM.DeviceInterface.IRotatorV2.TargetPosition"/>.</remarks>
</member><member name="M:ASCOM.DeviceInterface.IRotatorV2.MoveAbsolute(System.Single)">
	<summary>
 Causes the rotator to move the absolute position of <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Position"/> degrees.
 </summary>
	<param name="Position">Absolute position in degrees.</param>
	<remarks>Calling <see cref="M:ASCOM.DeviceInterface.IRotatorV2.MoveAbsolute(System.Single)">MoveAbsolute</see> causes the <see cref="P:ASCOM.DeviceInterface.IRotatorV2.TargetPosition"/> property to change to the value of the
 <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Position"/> parameter, then starts rotation to <see cref="P:ASCOM.DeviceInterface.IRotatorV2.TargetPosition"/>. </remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.Position">
	<summary>
 Current instantaneous Rotator position, in degrees.
 </summary>
	<remarks>
 The position is expressed as an angle from 0 up to but not including 360 degrees, counter-clockwise against the 
 sky. This is the standard definition of Position Angle. However, the rotator does not need to (and in general will not) 
 report the true Equatorial Position Angle, as the attached imager may not be precisely aligned with the rotator's indexing. 
 It is up to the client to determine any offset between mechanical rotator position angle and the true Equatorial Position 
 Angle of the imager, and compensate for any difference. 
 <para>The optional <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Reverse"/> property is provided in order to manage rotators being used on optics with odd or 
 even number of reflections. With the Reverse switch in the correct position for the optics, the reported position angle must 
 be counter-clockwise against the sky.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.Reverse">
	<summary>
 Sets or Returns the rotator’s Reverse state.
 </summary>
	<value>True if the rotation and angular direction must be reversed for the optics</value>
	<remarks>See the definition of <see cref="P:ASCOM.DeviceInterface.IRotatorV2.Position"/>. Raises an error if not supported. </remarks>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Throw a PropertyNotImplementedException if the rotator cannot reverse.</exception>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.StepSize">
	<summary>
 The minimum StepSize, in degrees.
 </summary>
	<remarks>
 Raises an exception if the rotator does not intrinsically know what the step size is.
 </remarks>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Throw a PropertyNotImplementedException if the rotator does not know its step size.</exception>
</member><member name="P:ASCOM.DeviceInterface.IRotatorV2.TargetPosition">
	<summary>
 The destination position angle for Move() and MoveAbsolute().
 </summary>
	<value>The destination position angle for<see cref="M:ASCOM.DeviceInterface.IRotatorV2.Move(System.Single)">Move</see> and <see cref="M:ASCOM.DeviceInterface.IRotatorV2.MoveAbsolute(System.Single)">MoveAbsolute</see>.</value>
	<remarks>Upon calling <see cref="M:ASCOM.DeviceInterface.IRotatorV2.Move(System.Single)">Move</see> or <see cref="M:ASCOM.DeviceInterface.IRotatorV2.MoveAbsolute(System.Single)">MoveAbsolute</see>, this property immediately 
 changes to the position angle to which the rotator is moving. The value is retained until a subsequent call 
 to <see cref="M:ASCOM.DeviceInterface.IRotatorV2.Move(System.Single)">Move</see> or <see cref="M:ASCOM.DeviceInterface.IRotatorV2.MoveAbsolute(System.Single)">MoveAbsolute</see>.
 </remarks>
</member><member name="T:ASCOM.DeviceInterface.IRotatorV2">
	<summary>
 Defines the IRotator Interface
 </summary>
</member><member name="M:ASCOM.DeviceInterface.IRate.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IRate.Maximum">
	<summary>
 The maximum rate (degrees per second)
 This must always be a positive number. It indicates the maximum rate in either direction about the axis. 
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IRate.Minimum">
	<summary>
 The minimum rate (degrees per second)
 This must always be a positive number. It indicates the maximum rate in either direction about the axis. 
 </summary>
</member><member name="T:ASCOM.DeviceInterface.IRate">
	<summary>
 Describes a range of rates supported by the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method (degrees/per second)
 These are contained within an <see cref="T:ASCOM.DeviceInterface.IAxisRates"/> collection and serve to describe one or more supported ranges of rates of motion about a mechanical axis. 
 It is possible that the <see cref="P:ASCOM.DeviceInterface.IRate.Maximum"/> and <see cref="P:ASCOM.DeviceInterface.IRate.Minimum"/> properties will be equal. In this case, the <see cref="T:ASCOM.DeviceInterface.IRate"/> object expresses a single discrete rate. 
 Both the <see cref="P:ASCOM.DeviceInterface.IRate.Minimum"/>  and <see cref="P:ASCOM.DeviceInterface.IRate.Maximum"/>  properties are always expressed in units of degrees per second.
 This is only using for Telescope InterfaceVersions 2 and 3
 </summary>
	<remarks>Values used must be non-negative and are scalar values. You do not need to supply complementary negative rates for each positive 
 rate that you specify. Movement in both directions is achieved by the application applying an appropriate positive or negative sign to the 
 rate when it is used in the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> command.</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.Connected">
	<summary>
 Set True to connect to the device. Set False to disconnect from the device.
 You can also read the property to check whether it is connected.
 </summary>
	<value><c>true</c> if connected; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.Description">
	<summary>
 Returns a description of the device, such as manufacturer and modelnumber. Any ASCII characters may be used. 
 </summary>
	<value>The description.</value>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.DriverInfo">
	<summary>
 Descriptive and version information about this ASCOM driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
 It is intended to display detailed information on the ASCOM driver, including version and copyright data.
 See the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.Description"/> property for information on the device itself.
 To get the driver version in a parseable string, use the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.DriverVersion"/> property.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.DriverVersion">
	<summary>
 A string containing only the major and minor version of the driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
 It should not to be confused with the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.InterfaceVersion"/> property, which is the version of this specification supported by the 
 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.InterfaceVersion">
	<summary>
 The interface version number that this device supports. Should return 2 for this interface version.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read ths property.
 If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
 In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.Name">
	<summary>
 The short name of the driver, for display purposes
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.SetupDialog">
	<summary>
 Launches a configuration dialog box for the driver.  The call will not return
 until the user clicks OK or cancel manually.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.Action(System.String,System.String)">
	<summary>
 Invokes the specified device-specific action.
 </summary>
	<param name="ActionName">
 A well known name agreed by interested parties that represents the action to be carried out. 
 </param>
	<param name="ActionParameters">List of required parameters or an <see cref="T:System.String">Empty String</see> if none are required.
 </param>
	<returns>A string response. The meaning of returned strings is set by the driver author.</returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throws this exception if no actions are suported.</exception>
	<exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the SupportedActions method will inform clients 
 of driver capabilities, but the driver must still throw an ASCOM.ActionNotImplemented exception if it is asked to 
 perform an action that it does not support.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<example>Suppose filter wheels start to appear with automatic wheel changers; new actions could 
 be “FilterWheel:QueryWheels” and “FilterWheel:SelectWheel”. The former returning a 
 formatted list of wheel names and the second taking a wheel name and making the change, returning appropriate 
 values to indicate success or failure.
 </example>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 This method is intended for use in all current and future device types and to avoid name clashes, management of action names 
 is important from day 1. A two-part naming convention will be adopted - <b>DeviceType:UniqueActionName</b> where:
 <list type="bullet">
			<item><description>DeviceType is the same value as would be used by <see cref="P:ASCOM.Utilities.Chooser.DeviceType"/> e.g. Telescope, Camera, Switch etc.</description></item>
			<item><description>UniqueActionName is a single word, or multiple words joined by underscore characters, that sensibly describes the action to be performed.</description></item>
		</list>
		<para>
 It is recommended that UniqueActionNames should be a maximum of 16 characters for legibility.
 Should the same function and UniqueActionName be supported by more than one type of device, the reserved DeviceType of 
 “General” will be used. Action names will be case insensitive, so FilterWheel:SelectWheel, filterwheel:selectwheel 
 and FILTERWHEEL:SELECTWHEEL will all refer to the same action.</para>
		<para>The names of all supported actions must bre returned in the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.SupportedActions"/> property.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.SupportedActions">
	<summary>
 Returns the list of action names supported by this driver.
 </summary>
	<value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This method must return an empty arraylist if no actions are supported. Please do not throw a 
 <see cref="T:ASCOM.PropertyNotImplementedException"/>.
 <para>This is an aid to client authors and testers who would otherwise have to repeatedly poll the driver to determine its capabilities. 
 Returned action names may be in mixed case to enhance presentation but  will be recognised case insensitively in 
 the <see cref="M:ASCOM.DeviceInterface.IFocuserV2.Action(System.String,System.String)">Action</see> method.</para>
		<para>An array list collection has been selected as the vehicle for  action names in order to make it easier for clients to
 determine whether a particular action is supported. This is easily done through the Contains method. Since the
 collection is also ennumerable it is easy to use constructs such as For Each ... to operate on members without having to be concerned 
 about hom many members are in the collection. </para>
		<para>Collections have been used in the Telescope specification for a number of years and are known to be compatible with COM. Within .NET
 the ArrayList is the correct implementation to use as the .NET Generic methods are not compatible with COM.</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.CommandBlind(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and does not wait for a response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.CommandBool(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a boolean response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the interpreted boolean response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.CommandString(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a string response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the string response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.Absolute">
	<summary>
 True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
 </summary>
	<exception cref="T:ASCOM.NotConnectedException">If the driver must be connected in order to determine the property value.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.Halt">
	<summary>
 Immediately stop any focuser motion due to a previous <see cref="M:ASCOM.DeviceInterface.IFocuserV2.Move(System.Int32)"/> method call.
 </summary>
	<exception cref="T:ASCOM.MethodNotImplementedException">Focuser does not support this method.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Can throw a not implemented exception</b></p>Some focusers may not support this function, in which case an exception will be raised. 
 <para><b>Recommendation:</b> Host software should call this method upon initialization and,
 if it fails, disable the Halt button in the user interface.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.IsMoving">
	<summary>
 True if the focuser is currently moving to a new position. False if the focuser is stationary.
 </summary>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p></remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.Link">
	<summary>
 State of the connection to the focuser.
 </summary>
	<remarks>
		<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
		<p style="color:red"><b>Must be implemented</b></p> Set True to start the connection to the focuser; set False to terminate the connection. 
 The current connection status can also be read back through this property. 
 An exception will be raised if the link fails to change state for any reason. 
 <para><b>Note</b></para>
		<para>The FocuserV1 interface was the only interface to name its <i>"Connect"</i> method "Link" all others named 
 their <i>"Connect"</i> method as "Connected". All interfaces including Focuser now have a <see cref="P:ASCOM.DeviceInterface.IFocuserV2.Connected"></see> method and this is 
 the recommended method to use to <i>"Connect"</i> to Focusers exposing the V2 and later interfaces.</para>
		<para>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.MaxIncrement">
	<summary>
 Maximum increment size allowed by the focuser; 
 i.e. the maximum number of steps allowed in one move operation.
 </summary>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> For most focusers this is the same as the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.MaxStep"/> property. This is normally used to limit the Increment 
 display in the host software.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.MaxStep">
	<summary>
 Maximum step position permitted.
 </summary>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> The focuser can step between 0 and <see cref="P:ASCOM.DeviceInterface.IFocuserV2.MaxStep"/>. If an attempt is made to move the focuser beyond these limits,
 it will automatically stop at the limit.
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.IFocuserV2.Move(System.Int32)">
	<summary>
  Moves the focuser by the specified amount or to the specified position depending on the value of the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.Absolute"/> property.
 </summary>
	<param name="Position">Step distance or absolute position, depending on the value of the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.Absolute"/> property.</param>
	<exception cref="T:ASCOM.InvalidOperationException">If a Move operation is requested when <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempComp"/> is True</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> If the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.Absolute"/> property is True, then this is an absolute positioning focuser. 
 The <see cref="M:ASCOM.DeviceInterface.IFocuserV2.Move(System.Int32)">Move</see> command tells the focuser to move to an exact step position, and the Position parameter 
 of the <see cref="M:ASCOM.DeviceInterface.IFocuserV2.Move(System.Int32)">Move</see> method is an integer between 0 and <see cref="P:ASCOM.DeviceInterface.IFocuserV2.MaxStep"/>.
 <para>If the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.Absolute"/> property is False, then this is a relative positioning focuser. The <see cref="M:ASCOM.DeviceInterface.IFocuserV2.Move(System.Int32)">Move</see> command tells 
 the focuser to move in a relative direction, and the Position parameter of the <see cref="M:ASCOM.DeviceInterface.IFocuserV2.Move(System.Int32)">Move</see> method (in this case, step distance) 
 is an integer between minus <see cref="P:ASCOM.DeviceInterface.IFocuserV2.MaxIncrement"/> and plus <see cref="P:ASCOM.DeviceInterface.IFocuserV2.MaxIncrement"/>.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.Position">
	<summary>
 Current focuser position, in steps.
 </summary>
	<exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not available for this device.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Can throw a not implemented exception</b></p> Valid only for absolute positioning focusers (see the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.Absolute"/> property).
 A <see cref="T:ASCOM.PropertyNotImplementedException">PropertyNotImplementedException</see> exception must be thrown if this device is a 
 relative positioning focuser rather than an absolute position focuser.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.StepSize">
	<summary>
 Step size (microns) for the focuser.
 </summary>
	<exception cref="T:ASCOM.PropertyNotImplementedException">If the focuser does not intrinsically know what the step size is.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> Must throw an exception if the focuser does not intrinsically know what the step size is.</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.TempComp">
	<summary>
 The state of temperature compensation mode (if available), else always False.
 </summary>
	<exception cref="T:ASCOM.PropertyNotImplementedException">If <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempCompAvailable"/> is False and an attempt is made to set <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempComp"/> to true.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 If the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempCompAvailable"/> property is True, then setting <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempComp"/> to True
 puts the focuser into temperature tracking mode. While in temperature tracking mode,
 <see cref="M:ASCOM.DeviceInterface.IFocuserV2.Move(System.Int32)">Move</see> commands will be rejected by the focuser. Set to False to turn off temperature tracking.
 <para>If temperature compensation is not available, this property must always return False.</para>
		<para> A <see cref="T:ASCOM.PropertyNotImplementedException"/> exception must be thrown if <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempCompAvailable"/> 
 is False and an attempt is made to set <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempComp"/> to true.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.TempCompAvailable">
	<summary>
 True if focuser has temperature compensation available.
 </summary>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> Will be True only if the focuser's temperature compensation can be turned on and off via the <see cref="P:ASCOM.DeviceInterface.IFocuserV2.TempComp"/> property. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFocuserV2.Temperature">
	<summary>
 Current ambient temperature as measured by the focuser.
 </summary>
	<exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not available for this device.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 Raises an exception if ambient temperature is not available. Commonly available on focusers with a built-in temperature compensation mode. 
 </remarks>
</member><member name="T:ASCOM.DeviceInterface.IFocuserV2">
	<summary>
 Provides universal access to Focuser drivers
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.Connected">
	<summary>
 Set True to connect to the device. Set False to disconnect from the device.
 You can also read the property to check whether it is connected.
 </summary>
	<value><c>true</c> if connected; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.Description">
	<summary>
 Returns a description of the device, such as manufacturer and modelnumber. Any ASCII characters may be used. 
 </summary>
	<value>The description.</value>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.DriverInfo">
	<summary>
 Descriptive and version information about this ASCOM driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
 It is intended to display detailed information on the ASCOM driver, including version and copyright data.
 See the <see cref="P:ASCOM.DeviceInterface.IFilterWheelV2.Description"/> property for information on the device itself.
 To get the driver version in a parseable string, use the <see cref="P:ASCOM.DeviceInterface.IFilterWheelV2.DriverVersion"/> property.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.DriverVersion">
	<summary>
 A string containing only the major and minor version of the driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
 It should not to be confused with the <see cref="P:ASCOM.DeviceInterface.IFilterWheelV2.InterfaceVersion"/> property, which is the version of this specification supported by the 
 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.InterfaceVersion">
	<summary>
 The interface version number that this device supports. Should return 2 for this interface version.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read ths property.
 If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
 In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.Name">
	<summary>
 The short name of the driver, for display purposes
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFilterWheelV2.SetupDialog">
	<summary>
 Launches a configuration dialog box for the driver.  The call will not return
 until the user clicks OK or cancel manually.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFilterWheelV2.Action(System.String,System.String)">
	<summary>
 Invokes the specified device-specific action.
 </summary>
	<param name="ActionName">
 A well known name agreed by interested parties that represents the action to be carried out. 
 </param>
	<param name="ActionParameters">List of required parameters or an <see cref="T:System.String">Empty String</see> if none are required.
 </param>
	<returns>A string response. The meaning of returned strings is set by the driver author.</returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throws this exception if no actions are suported.</exception>
	<exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the SupportedActions method will inform clients 
 of driver capabilities, but the driver must still throw an ASCOM.ActionNotImplemented exception if it is asked to 
 perform an action that it does not support.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<example>Suppose filter wheels start to appear with automatic wheel changers; new actions could 
 be “FilterWheel:QueryWheels” and “FilterWheel:SelectWheel”. The former returning a 
 formatted list of wheel names and the second taking a wheel name and making the change, returning appropriate 
 values to indicate success or failure.
 </example>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 This method is intended for use in all current and future device types and to avoid name clashes, management of action names 
 is important from day 1. A two-part naming convention will be adopted - <b>DeviceType:UniqueActionName</b> where:
 <list type="bullet">
			<item><description>DeviceType is the same value as would be used by <see cref="P:ASCOM.Utilities.Chooser.DeviceType"/> e.g. Telescope, Camera, Switch etc.</description></item>
			<item><description>UniqueActionName is a single word, or multiple words joined by underscore characters, that sensibly describes the action to be performed.</description></item>
		</list>
		<para>
 It is recommended that UniqueActionNames should be a maximum of 16 characters for legibility.
 Should the same function and UniqueActionName be supported by more than one type of device, the reserved DeviceType of 
 “General” will be used. Action names will be case insensitive, so FilterWheel:SelectWheel, filterwheel:selectwheel 
 and FILTERWHEEL:SELECTWHEEL will all refer to the same action.</para>
		<para>The names of all supported actions must bre returned in the <see cref="P:ASCOM.DeviceInterface.IFilterWheelV2.SupportedActions"/> property.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.SupportedActions">
	<summary>
 Returns the list of action names supported by this driver.
 </summary>
	<value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This method must return an empty arraylist if no actions are supported. Please do not throw a 
 <see cref="T:ASCOM.PropertyNotImplementedException"/>.
 <para>This is an aid to client authors and testers who would otherwise have to repeatedly poll the driver to determine its capabilities. 
 Returned action names may be in mixed case to enhance presentation but  will be recognised case insensitively in 
 the <see cref="M:ASCOM.DeviceInterface.IFilterWheelV2.Action(System.String,System.String)">Action</see> method.</para>
		<para>An array list collection has been selected as the vehicle for  action names in order to make it easier for clients to
 determine whether a particular action is supported. This is easily done through the Contains method. Since the
 collection is also ennumerable it is easy to use constructs such as For Each ... to operate on members without having to be concerned 
 about hom many members are in the collection. </para>
		<para>Collections have been used in the Telescope specification for a number of years and are known to be compatible with COM. Within .NET
 the ArrayList is the correct implementation to use as the .NET Generic methods are not compatible with COM.</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFilterWheelV2.CommandBlind(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and does not wait for a response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFilterWheelV2.CommandBool(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a boolean response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the interpreted boolean response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFilterWheelV2.CommandString(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a string response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the string response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IFilterWheelV2.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.FocusOffsets">
	<summary>
 Focus offset of each filter in the wheel
</summary>
	<remarks>
 For each valid slot number (from 0 to N-1), reports the focus offset for
 the given filter position.  These values are focuser and filter
 dependent, and  would usually be set up by the user via the SetupDialog.
 The number of slots N can be determined from the length of the array.
 If focuser offsets are not available, then it should report back 0 for all
 array values.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.Names">
	<summary>
 Name of each filter in the wheel
</summary>
	<remarks>
 For each valid slot number (from 0 to N-1), reports the name given to the
 filter position.  These names would usually be set up by the user via the
 SetupDialog.  The number of slots N can be determined from the length of
 the array.  If filter names are not available, then it should report back
 "Filter 1", "Filter 2", etc.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IFilterWheelV2.Position">
	<summary>
 Sets or returns the current filter wheel position
 </summary>
	<remarks>
 Write a position number between 0 and N-1, where N is the number of filter slots (see
 <see cref="P:ASCOM.DeviceInterface.IFilterWheelV2.Names"/>). Starts filter wheel rotation immediately when written. Reading
 the property gives current slot number (if wheel stationary) or -1 if wheel is
 moving. 
 <para>Returning a position of -1 is <b>mandatory</b> while the filter wheel is in motion; valid slot numbers must not be reported back while
 the filter wheel is rotating past filter positions.</para>
		<para><b>Note</b></para>
		<para>Some filter wheels are built into the camera (one driver, two
 interfaces).  Some cameras may not actually rotate the wheel until the
 exposure is triggered.  In this case, the written value is available
 immediately as the read value, and -1 is never produced.</para>
	</remarks>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an InvalidValueException if an invalid position is set</exception>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the Filter Wheel is not connected</exception>
</member><member name="T:ASCOM.DeviceInterface.IFilterWheelV2">
	<summary>
 Defines the IFilterWheel Interface
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.Connected">
	<summary>
 Set True to connect to the device. Set False to disconnect from the device.
 You can also read the property to check whether it is connected.
 </summary>
	<value><c>true</c> if connected; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.Description">
	<summary>
 Returns a description of the device, such as manufacturer and modelnumber. Any ASCII characters may be used. 
 </summary>
	<value>The description.</value>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.DriverInfo">
	<summary>
 Descriptive and version information about this ASCOM driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
 It is intended to display detailed information on the ASCOM driver, including version and copyright data.
 See the <see cref="P:ASCOM.DeviceInterface.IDomeV2.Description"/> property for information on the device itself.
 To get the driver version in a parseable string, use the <see cref="P:ASCOM.DeviceInterface.IDomeV2.DriverVersion"/> property.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.DriverVersion">
	<summary>
 A string containing only the major and minor version of the driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
 It should not to be confused with the <see cref="P:ASCOM.DeviceInterface.IDomeV2.InterfaceVersion"/> property, which is the version of this specification supported by the 
 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.InterfaceVersion">
	<summary>
 The interface version number that this device supports. Should return 2 for this interface version.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read ths property.
 If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
 In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.Name">
	<summary>
 The short name of the driver, for display purposes
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.SetupDialog">
	<summary>
 Launches a configuration dialog box for the driver.  The call will not return
 until the user clicks OK or cancel manually.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.Action(System.String,System.String)">
	<summary>
 Invokes the specified device-specific action.
 </summary>
	<param name="ActionName">
 A well known name agreed by interested parties that represents the action to be carried out. 
 </param>
	<param name="ActionParameters">List of required parameters or an <see cref="T:System.String">Empty String</see> if none are required.
 </param>
	<returns>A string response. The meaning of returned strings is set by the driver author.</returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throws this exception if no actions are suported.</exception>
	<exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the SupportedActions method will inform clients 
 of driver capabilities, but the driver must still throw an ASCOM.ActionNotImplemented exception if it is asked to 
 perform an action that it does not support.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<example>Suppose filter wheels start to appear with automatic wheel changers; new actions could 
 be “FilterWheel:QueryWheels” and “FilterWheel:SelectWheel”. The former returning a 
 formatted list of wheel names and the second taking a wheel name and making the change, returning appropriate 
 values to indicate success or failure.
 </example>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 This method is intended for use in all current and future device types and to avoid name clashes, management of action names 
 is important from day 1. A two-part naming convention will be adopted - <b>DeviceType:UniqueActionName</b> where:
 <list type="bullet">
			<item><description>DeviceType is the same value as would be used by <see cref="P:ASCOM.Utilities.Chooser.DeviceType"/> e.g. Telescope, Camera, Switch etc.</description></item>
			<item><description>UniqueActionName is a single word, or multiple words joined by underscore characters, that sensibly describes the action to be performed.</description></item>
		</list>
		<para>
 It is recommended that UniqueActionNames should be a maximum of 16 characters for legibility.
 Should the same function and UniqueActionName be supported by more than one type of device, the reserved DeviceType of 
 “General” will be used. Action names will be case insensitive, so FilterWheel:SelectWheel, filterwheel:selectwheel 
 and FILTERWHEEL:SELECTWHEEL will all refer to the same action.</para>
		<para>The names of all supported actions must bre returned in the <see cref="P:ASCOM.DeviceInterface.IDomeV2.SupportedActions"/> property.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.SupportedActions">
	<summary>
 Returns the list of action names supported by this driver.
 </summary>
	<value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This method must return an empty arraylist if no actions are supported. Please do not throw a 
 <see cref="T:ASCOM.PropertyNotImplementedException"/>.
 <para>This is an aid to client authors and testers who would otherwise have to repeatedly poll the driver to determine its capabilities. 
 Returned action names may be in mixed case to enhance presentation but  will be recognised case insensitively in 
 the <see cref="M:ASCOM.DeviceInterface.IDomeV2.Action(System.String,System.String)">Action</see> method.</para>
		<para>An array list collection has been selected as the vehicle for  action names in order to make it easier for clients to
 determine whether a particular action is supported. This is easily done through the Contains method. Since the
 collection is also ennumerable it is easy to use constructs such as For Each ... to operate on members without having to be concerned 
 about hom many members are in the collection. </para>
		<para>Collections have been used in the Telescope specification for a number of years and are known to be compatible with COM. Within .NET
 the ArrayList is the correct implementation to use as the .NET Generic methods are not compatible with COM.</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.CommandBlind(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and does not wait for a response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.CommandBool(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a boolean response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the interpreted boolean response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.CommandString(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a string response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the string response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.AbortSlew">
	<summary>
 Immediately cancel current dome operation.
 </summary>
	<remarks>
 Calling this method will immediately disable hardware slewing (<see cref="P:ASCOM.DeviceInterface.IDomeV2.Slaved"/> will become False).
 Raises an error if a communications failure occurs, or if the command is known to have failed. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.Altitude">
	<summary>
 The dome altitude (degrees, horizon zero and increasing positive to 90 zenith).
 </summary>
	<remarks>
 Raises an error only if no altitude control. If actual dome altitude can not be read,
 then reports back the last slew position. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.AtHome">
	<summary>
   Indicates whether the dome is in the home position.
   Raises an error if not supported. 
 <para>
   This is normally used following a <see cref="M:ASCOM.DeviceInterface.IDomeV2.FindHome"/> operation. The value is reset with any azimuth
   slew operation that moves the dome away from the home position.
 </para>
		<para>
			<see cref="P:ASCOM.DeviceInterface.IDomeV2.AtHome"/> may also become true durng normal slew operations, if the dome passes through the home position
   and the dome controller hardware is capable of detecting that; or at the end of a slew operation if the dome
   comes to rest at the home position.
 </para>
	</summary>
	<remarks>
		<para>
     The home position is normally defined by a hardware sensor positioned around the dome circumference
     and represents a fixed, known azimuth reference.
   </para>
		<para>
     For some devices, the home position may represent a small range of azimuth values, rather than a discrete
     value, since dome inertia, the resolution of the home position sensor and/or the azimuth encoder may be
     insufficient to return the exact same azimuth value on each occasion. Some dome controllers, on the other
     hand, will always force the azimuth reading to a fixed value whenever the home position sensor is active.
     Because of these potential differences in behaviour, applications should not rely on the reported azimuth
     position being identical each time <see cref="P:ASCOM.DeviceInterface.IDomeV2.AtHome"/> is set <c>true</c>.
   </para>
	</remarks>
 [ASCOM-135] TPL - Updated documentation

</member><member name="P:ASCOM.DeviceInterface.IDomeV2.AtPark">
	<summary>
 True if the dome is in the programmed park position.
 </summary>
	<remarks>
 Set only following a <see cref="M:ASCOM.DeviceInterface.IDomeV2.Park"/> operation and reset with any slew operation.
 Raises an error if not supported. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.Azimuth">
	<summary>
 The dome azimuth (degrees, North zero and increasing clockwise, i.e., 90 East, 180 South, 270 West)
 </summary>
	<remarks>Raises an error only if no azimuth control. If actual dome azimuth can not be read, then reports back last slew position</remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanFindHome">
	<summary>
 True if driver can do a search for home position.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanPark">
	<summary>
 True if driver is capable of setting dome altitude.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanSetAltitude">
	<summary>
 True if driver is capable of setting dome altitude.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanSetAzimuth">
	<summary>
 True if driver is capable of setting dome azimuth.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanSetPark">
	<summary>
 True if driver can set the dome park position.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanSetShutter">
	<summary>
 True if driver is capable of automatically operating shutter.
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanSlave">
	<summary>
 True if the dome hardware supports slaving to a telescope.
 </summary>
	<remarks>See the notes for the <see cref="P:ASCOM.DeviceInterface.IDomeV2.Slaved"/> property.</remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.CanSyncAzimuth">
	<summary>
 True if driver is capable of synchronizing the dome azimuth position using the <see cref="M:ASCOM.DeviceInterface.IDomeV2.SyncToAzimuth(System.Double)"/> method.
 </summary>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.CloseShutter">
	<summary>
 Close shutter or otherwise shield telescope from the sky.
 </summary>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.FindHome">
	<summary>
 Start operation to search for the dome home position.
 </summary>
	<remarks>
 After Home position is established initializes <see cref="P:ASCOM.DeviceInterface.IDomeV2.Azimuth"/> to the default value and sets the <see cref="P:ASCOM.DeviceInterface.IDomeV2.AtHome"/> flag. 
 Exception if not supported or communications failure. Raises an error if <see cref="P:ASCOM.DeviceInterface.IDomeV2.Slaved"/> is True.
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.OpenShutter">
	<summary>
 Open shutter or otherwise expose telescope to the sky.
 </summary>
	<remarks>
 Raises an error if not supported or if a communications failure occurs. 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.Park">
	<summary>
 Rotate dome in azimuth to park position.
 </summary>
	<remarks>
 After assuming programmed park position, sets <see cref="P:ASCOM.DeviceInterface.IDomeV2.AtPark"/> flag. Raises an error if <see cref="P:ASCOM.DeviceInterface.IDomeV2.Slaved"/> is True,
 or if not supported, or if a communications failure has occurred. 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.SetPark">
	<summary>
 Set the current azimuth, altitude position of dome to be the park position.
 </summary>
	<remarks>
 Raises an error if not supported or if a communications failure occurs. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.ShutterStatus">
	<summary>
 Status of the dome shutter or roll-off roof.
 </summary>
	<remarks>
 Raises an error only if no shutter control.
 If actual shutter status can not be read, 
 then reports back the last shutter state. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.Slaved">
	<summary>
 True if the dome is slaved to the telescope in its hardware, else False.
 </summary>
	<remarks>
 Set this property to True to enable dome-telescope hardware slaving,
 if supported (see <see cref="P:ASCOM.DeviceInterface.IDomeV2.CanSlave"/>). Raises an exception on any attempt to set 
 this property if hardware slaving is not supported).
 Always returns False if hardware slaving is not supported. 
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.IDomeV2.Slewing">
	<summary>
 True if any part of the dome is currently moving, False if all dome components are steady.
 </summary>
	<remarks>
 Raises an error if <see cref="P:ASCOM.DeviceInterface.IDomeV2.Slaved"/> is True, if not supported, if a communications failure occurs,
 or if the dome can not reach indicated azimuth. 
 </remarks>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.SlewToAltitude(System.Double)">
	<summary>
 Slew the dome to the given altitude position.
 </summary>
	<remarks>
 Raises an error if <see cref="P:ASCOM.DeviceInterface.IDomeV2.Slaved"/> is True, if not supported, if a communications failure occurs,
 or if the dome can not reach indicated altitude. 
 </remarks>
	<param name="Altitude">Target dome altitude (degrees, horizon zero and increasing positive to 90 zenith)</param>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.SlewToAzimuth(System.Double)">
	<summary>
 Slew the dome to the given azimuth position.
 </summary>
	<remarks>
 Raises an error if <see cref="P:ASCOM.DeviceInterface.IDomeV2.Slaved"/> is True, if not supported, if a communications failure occurs,
 or if the dome can not reach indicated azimuth. 
 </remarks>
	<param name="Azimuth">Target azimuth (degrees, North zero and increasing clockwise. i.e., 90 East, 180 South, 270 West)</param>
</member><member name="M:ASCOM.DeviceInterface.IDomeV2.SyncToAzimuth(System.Double)">
	<summary>
 Synchronize the current position of the dome to the given azimuth.
 </summary>
	<remarks>
 Raises an error if not supported or if a communications failure occurs. 
 </remarks>
	<param name="Azimuth">Target azimuth (degrees, North zero and increasing clockwise. i.e., 90 East, 180 South, 270 West)</param>
</member><member name="T:ASCOM.DeviceInterface.IDomeV2">
	<summary>
 Defines the IDome Interface
 </summary>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.Connected">
	<summary>
 Set True to connect to the device. Set False to disconnect from the device.
 You can also read the property to check whether it is connected.
 </summary>
	<value><c>true</c> if connected; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here, that exception is for use in other methods that require a connection in order to succeed.</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.Description">
	<summary>
 Returns a description of the device, such as manufacturer and modelnumber. Any ASCII characters may be used. 
 </summary>
	<value>The description.</value>
	<exception cref="T:ASCOM.NotConnectedException">If the device is not connected and this information is only available when connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.DriverInfo">
	<summary>
 Descriptive and version information about this ASCOM driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks>
		<p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
 It is intended to display detailed information on the ASCOM driver, including version and copyright data.
 See the <see cref="P:ASCOM.DeviceInterface.ICameraV2.Description"/> property for information on the device itself.
 To get the driver version in a parseable string, use the <see cref="P:ASCOM.DeviceInterface.ICameraV2.DriverVersion"/> property.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.DriverVersion">
	<summary>
 A string containing only the major and minor version of the driver.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
 It should not to be confused with the <see cref="P:ASCOM.DeviceInterface.ICameraV2.InterfaceVersion"/> property, which is the version of this specification supported by the 
 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.InterfaceVersion">
	<summary>
 The interface version number that this device supports. Should return 2 for this interface version.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read ths property.
 If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
 In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
 </remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.Name">
	<summary>
 The short name of the driver, for display purposes
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.SetupDialog">
	<summary>
 Launches a configuration dialog box for the driver.  The call will not return
 until the user clicks OK or cancel manually.
 </summary>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.Action(System.String,System.String)">
	<summary>
 Invokes the specified device-specific action.
 </summary>
	<param name="ActionName">
 A well known name agreed by interested parties that represents the action to be carried out. 
 </param>
	<param name="ActionParameters">List of required parameters or an <see cref="T:System.String">Empty String</see> if none are required.
 </param>
	<returns>A string response. The meaning of returned strings is set by the driver author.</returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">Throws this exception if no actions are suported.</exception>
	<exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the SupportedActions method will inform clients 
 of driver capabilities, but the driver must still throw an ASCOM.ActionNotImplemented exception if it is asked to 
 perform an action that it does not support.</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<example>Suppose filter wheels start to appear with automatic wheel changers; new actions could 
 be “FilterWheel:QueryWheels” and “FilterWheel:SelectWheel”. The former returning a 
 formatted list of wheel names and the second taking a wheel name and making the change, returning appropriate 
 values to indicate success or failure.
 </example>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p> 
 This method is intended for use in all current and future device types and to avoid name clashes, management of action names 
 is important from day 1. A two-part naming convention will be adopted - <b>DeviceType:UniqueActionName</b> where:
 <list type="bullet">
			<item><description>DeviceType is the same value as would be used by <see cref="P:ASCOM.Utilities.Chooser.DeviceType"/> e.g. Telescope, Camera, Switch etc.</description></item>
			<item><description>UniqueActionName is a single word, or multiple words joined by underscore characters, that sensibly describes the action to be performed.</description></item>
		</list>
		<para>
 It is recommended that UniqueActionNames should be a maximum of 16 characters for legibility.
 Should the same function and UniqueActionName be supported by more than one type of device, the reserved DeviceType of 
 “General” will be used. Action names will be case insensitive, so FilterWheel:SelectWheel, filterwheel:selectwheel 
 and FILTERWHEEL:SELECTWHEEL will all refer to the same action.</para>
		<para>The names of all supported actions must bre returned in the <see cref="P:ASCOM.DeviceInterface.ICameraV2.SupportedActions"/> property.</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.SupportedActions">
	<summary>
 Returns the list of action names supported by this driver.
 </summary>
	<value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Must be implemented</b></p> This method must return an empty arraylist if no actions are supported. Please do not throw a 
 <see cref="T:ASCOM.PropertyNotImplementedException"/>.
 <para>This is an aid to client authors and testers who would otherwise have to repeatedly poll the driver to determine its capabilities. 
 Returned action names may be in mixed case to enhance presentation but  will be recognised case insensitively in 
 the <see cref="M:ASCOM.DeviceInterface.ICameraV2.Action(System.String,System.String)">Action</see> method.</para>
		<para>An array list collection has been selected as the vehicle for  action names in order to make it easier for clients to
 determine whether a particular action is supported. This is easily done through the Contains method. Since the
 collection is also ennumerable it is easy to use constructs such as For Each ... to operate on members without having to be concerned 
 about hom many members are in the collection. </para>
		<para>Collections have been used in the Telescope specification for a number of years and are known to be compatible with COM. Within .NET
 the ArrayList is the correct implementation to use as the .NET Generic methods are not compatible with COM.</para>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.CommandBlind(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and does not wait for a response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.CommandBool(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a boolean response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the interpreted boolean response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.CommandString(System.String,System.Boolean)">
	<summary>
 Transmits an arbitrary string to the device and waits for a string response.
 Optionally, protocol framing characters may be added to the string before transmission.
 </summary>
	<param name="Command">The literal command string to be transmitted.</param>
	<param name="Raw">
 if set to <c>true</c> the string is transmitted 'as-is'.
 If set to <c>false</c> then protocol framing characters may be added prior to transmission.
 </param>
	<returns>
 Returns the string response received from the device.
 </returns>
	<exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
	<exception cref="T:ASCOM.NotConnectedException">If the driver is not connected.</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if the call was not successful</exception>
	<remarks><p style="color:red"><b>Can throw a not implemented exception</b></p>
	</remarks>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.Dispose">
	<summary>
 Dispose the late-bound interface, if needed. Will release it via COM
 if it is a COM object, else if native .NET will just dereference it
 for GC.
 </summary>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.AbortExposure">
	<summary>
 Aborts the current exposure, if any, and returns the camera to Idle state.
 </summary>
	<remarks>
		<b>NOTES:</b>
		<list type="bullet">
			<item><description>Must throw exception if camera is not idle and abort is unsuccessful (or not possible, e.g. during download).</description></item>
			<item><description>Must throw exception if hardware or communications error occurs.</description></item>
			<item><description>Must NOT throw an exception if the camera is already idle.</description></item>
		</list>
	</remarks>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
	<exception cref="T:ASCOM.InvalidOperationException">Thrown if abort is not currently possible (e.g. during download).</exception>
	<exception cref="T:ASCOM.DriverException">Thrown if a communications error occurs, or if the abort fails.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.BinX">
	<summary>
 Sets the binning factor for the X axis, also returns the current value.  
 </summary>
	<remarks>
 Should default to 1 when the camera connection is established.  Note:  driver does not check
 for compatible subframe values when this value is set; rather they are checked upon <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see>.
 </remarks>
	<value>The X binning value</value>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception for illegal binning values</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.BinY">
	<summary>
 Sets the binning factor for the Y axis, also returns the current value. 
 </summary>
	<remarks>
 Should default to 1 when the camera connection is established.  Note:  driver does not check
 for compatible subframe values when this value is set; rather they are checked upon <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see>.
 </remarks>
	<value>The Y binning value.</value>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception for illegal binning values</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CameraState">
	<summary>
 Returns the current camera operational state
 </summary>
	<remarks>
 Returns one of the following status information:
 <list type="bullet">
			<listheader><description>Value  State           Meaning</description></listheader>
			<item><description>0      CameraIdle      At idle state, available to start exposure</description></item>
			<item><description>1      CameraWaiting   Exposure started but waiting (for shutter, trigger, filter wheel, etc.)</description></item>
			<item><description>2      CameraExposing  Exposure currently in progress</description></item>
			<item><description>3      CameraReading   CCD array is being read out (digitized)</description></item>
			<item><description>4      CameraDownload  Downloading data to PC</description></item>
			<item><description>5      CameraError     Camera error condition serious enough to prevent further operations (connection fail, etc.).</description></item>
		</list>
	</remarks>
	<value>The state of the camera.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must return an exception if the camera status is unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CameraXSize">
	<summary>
 Returns the width of the CCD camera chip in unbinned pixels.
 </summary>
	<value>The size of the camera X.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if the value is not known</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CameraYSize">
	<summary>
 Returns the height of the CCD camera chip in unbinned pixels.
 </summary>
	<value>The size of the camera Y.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if the value is not known</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CanAbortExposure">
	<summary>
 Returns True if the camera can abort exposures; False if not.
 </summary>
	<value>
		<c>true</c> if this instance can abort exposure; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CanAsymmetricBin">
	<summary>
 Returns a flag showing whether this camera supports asymmetric binning
 </summary>
	<remarks>
 If True, the camera can have different binning on the X and Y axes, as
 determined by <see cref="P:ASCOM.DeviceInterface.ICameraV2.BinX"/> and <see cref="P:ASCOM.DeviceInterface.ICameraV2.BinY"/>. If False, the binning must be equal on the X and Y axes.
 </remarks>
	<value>
		<c>true</c> if this instance can asymmetric bin; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if the value is not known (n.b. normally only
 occurs if no connection established and camera must be queried)</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CanGetCoolerPower">
	<summary>
 If True, the camera's cooler power setting can be read.
 </summary>
	<value>
		<c>true</c> if this instance can get cooler power; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CanPulseGuide">
	<summary>
 Returns a flag indicating whether this camera supports pulse guiding
 </summary>
	<remarks>
 Returns True if the camera can send autoguider pulses to the telescope mount; False if not.  
 Note: this does not provide any indication of whether the autoguider cable is actually connected.
 </remarks>
	<value>
		<c>true</c> if this instance can pulse guide; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CanSetCCDTemperature">
	<summary>
 Returns a flag indicatig whether this camera supports setting the CCD temperature
 </summary>
	<remarks>
 If True, the camera's cooler setpoint can be adjusted. If False, the camera
 either uses open-loop cooling or does not have the ability to adjust temperature
 from software, and setting the <see cref="P:ASCOM.DeviceInterface.ICameraV2.SetCCDTemperature"/> property has no effect.
 </remarks>
	<value>
		<c>true</c> if this instance can set CCD temperature; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CanStopExposure">
	<summary>
 Returns a flag indicating whether this camera can stop an exposure that is in progress
 </summary>
	<remarks>
 Some cameras support <see cref="M:ASCOM.DeviceInterface.ICameraV2.StopExposure"/>, which allows the exposure to be terminated
 before the exposure timer completes, but will still read out the image.  Returns
 True if  <see cref="M:ASCOM.DeviceInterface.ICameraV2.StopExposure"/> is available, False if not.
 </remarks>
	<value>
		<c>true</c> if the camera can stop the exposure; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.PropertyNotImplementedException">not supported</exception>
	<exception cref="T:ASCOM.NotConnectedException">an error condition such as connection failure is present</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CCDTemperature">
	<summary>
 Returns the current CCD temperature in degrees Celsius.
 </summary>
	<remarks>
 Only valid if  <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanSetCCDTemperature"/> is True.
 </remarks>
	<value>The CCD temperature.</value>
	<exception cref="T:ASCOM.InvalidValueException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CoolerOn">
	<summary>
 Turns on and off the camera cooler, and returns the current on/off state.
 </summary>
	<remarks>
		<b>Warning:</b> turning the cooler off when the cooler is operating at high delta-T
 (typically &gt;20C below ambient) may result in thermal shock.  Repeated thermal
 shock may lead to damage to the sensor or cooler stack.  Please consult the
 documentation supplied with the camera for further information.
 </remarks>
	<value><c>true</c> if the cooler is on; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.PropertyNotImplementedException">not supported</exception>
	<exception cref="T:ASCOM.NotConnectedException">an error condition such as connection failure is present</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CoolerPower">
	<summary>
 Returns the present cooler power level, in percent.
 </summary>
	<remarks>
 Returns zero if <see cref="P:ASCOM.DeviceInterface.ICameraV2.CoolerOn"/> is False.
 </remarks>
	<value>The cooler power.</value>
	<exception cref="T:ASCOM.PropertyNotImplementedException">not supported</exception>
	<exception cref="T:ASCOM.NotConnectedException">an error condition such as connection failure is present</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ElectronsPerADU">
	<summary>
 Returns the gain of the camera in photoelectrons per A/D unit.
 </summary>
	<remarks>
 Some cameras have multiple gain modes; these should be selected via the  <see cref="M:ASCOM.DeviceInterface.ICameraV2.SetupDialog"/> and thus are
 static during a session.
 </remarks>
	<value>The electrons per ADU.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.FullWellCapacity">
	<summary>
 Reports the full well capacity of the camera in electrons, at the current camera settings (binning, SetupDialog settings, etc.)
 </summary>
	<value>The full well capacity.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.HasShutter">
	<summary>
 Returns a flag indicating whether this camera has a mechanical shutter
 </summary>
	<remarks>
 If True, the camera has a mechanical shutter. If False, the camera does not have
 a shutter.  If there is no shutter, the  <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see> command will ignore the
 Light parameter.
 </remarks>
	<value>
		<c>true</c> if this instance has shutter; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.HeatSinkTemperature">
	<summary>
 Returns the current heat sink temperature (called "ambient temperature" by some manufacturers) in degrees Celsius. 
 </summary>
	<remarks>
 Only valid if  <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanSetCCDTemperature"/> is True.
 </remarks>
	<value>The heat sink temperature.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ImageArray">
	<summary>
 Returns a safearray of int of size <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumX"/> * <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumY"/> containing the pixel values from the last exposure. 
 </summary>
	<remarks>
 The application must inspect the Safearray parameters to determine the dimensions. 
 <para>Note: if <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumX"/> or <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumY"/> is changed after a call to <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see> it will 
 have no effect on the size of this array. This is the preferred method for programs (not scripts) to download 
 iamges since it requires much less memory.</para>
		<para>For color or multispectral cameras, will produce an array of  <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumX"/> * <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumY"/> *
 NumPlanes.  If the application cannot handle multispectral images, it should use just the first plane.</para>
	</remarks>
	<value>The image array.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ImageArrayVariant">
	<summary>
 Returns a safearray of Variant of size <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumX"/> * <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumY"/> containing the pixel values from the last exposure. 
 </summary>
	<remarks>
 The application must inspect the Safearray parameters to
 determine the dimensions. Note: if <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumX"/> or <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumY"/> is changed after a call to
 <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see> it will have no effect on the size of this array. This property
 should only be used from scripts due to the extremely high memory utilization on
 large image arrays (26 bytes per pixel). Pixels values should be in Short, int,
 or Double format.
 <para>For color or multispectral cameras, will produce an array of <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumX"/> * <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumY"/> *
 NumPlanes.  If the application cannot handle multispectral images, it should use
 just the first plane.</para>
	</remarks>
	<value>The image array variant.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ImageReady">
	<summary>
 Returns a flag indicating whether the image is ready to be downloaded fom the camera
 </summary>
	<remarks>
 If True, there is an image from the camera available. If False, no image
 is available and attempts to use the <see cref="P:ASCOM.DeviceInterface.ICameraV2.ImageArray"/> method will produce an exception
 </remarks>.
 <value><c>true</c> if [image ready]; otherwise, <c>false</c>.</value>
	<exception cref="T:ASCOM.NotConnectedException">hardware or communications connection error has occurred.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.IsPulseGuiding">
	<summary>
 Returns a flag indicating whether the camera is currrently in a <see cref="M:ASCOM.DeviceInterface.ICameraV2.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> operation.
 </summary>
	<remarks>
 If True, pulse guiding is in progress. Required if the <see cref="M:ASCOM.DeviceInterface.ICameraV2.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method
 (which is non-blocking) is implemented. See the <see cref="M:ASCOM.DeviceInterface.ICameraV2.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method.
 </remarks>
	<value>
		<c>true</c> if this instance is pulse guiding; otherwise, <c>false</c>.
 </value>
	<exception cref="T:ASCOM.NotConnectedException">hardware or communications connection error has occurred.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.LastExposureDuration">
	<summary>
 Reports the actual exposure duration in seconds (i.e. shutter open time).  
 </summary>
	<remarks>
 This may differ from the exposure time requested due to shutter latency, camera timing precision, etc.
 </remarks>
	<value>The last duration of the exposure.</value>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if not supported</exception>
	<exception cref="T:ASCOM.InvalidOperationException">If called before any exposure has been taken</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.LastExposureStartTime">
	<summary>
 Reports the actual exposure start in the FITS-standard CCYY-MM-DDThh:mm:ss[.sss...] format.
 </summary>
	<value>The last exposure start time.</value>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if not supported</exception>
	<exception cref="T:ASCOM.InvalidOperationException">If called before any exposure has been taken</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.MaxADU">
	<summary>
 Reports the maximum ADU value the camera can produce.
 </summary>
	<value>The maximum ADU.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.MaxBinX">
	<summary>
 Returns the maximum allowed binning for the X camera axis
 </summary>
	<remarks>
 If <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanAsymmetricBin"/> = False, returns the maximum allowed binning factor. If
 <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanAsymmetricBin"/> = True, returns the maximum allowed binning factor for the X axis.
 </remarks>
	<value>The max bin X.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.MaxBinY">
	<summary>
 Returns the maximum allowed binning for the Y camera axis
 </summary>
	<remarks>
 If <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanAsymmetricBin"/> = False, equals <see cref="P:ASCOM.DeviceInterface.ICameraV2.MaxBinX"/>. If <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanAsymmetricBin"/> = True,
 returns the maximum allowed binning factor for the Y axis.
 </remarks>
	<value>The max bin Y.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.NumX">
	<summary>
 Sets the subframe width. Also returns the current value.  
 </summary>
	<remarks>
 If binning is active, value is in binned pixels.  No error check is performed when the value is set. 
 Should default to <see cref="P:ASCOM.DeviceInterface.ICameraV2.CameraXSize"/>.
 </remarks>
	<value>The num X.</value>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.NumY">
	<summary>
 Sets the subframe height. Also returns the current value.
 </summary>
	<remarks>
 If binning is active,
 value is in binned pixels.  No error check is performed when the value is set.
 Should default to <see cref="P:ASCOM.DeviceInterface.ICameraV2.CameraYSize"/>.
 </remarks>
	<value>The num Y.</value>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.PixelSizeX">
	<summary>
 Returns the width of the CCD chip pixels in microns.
 </summary>
	<value>The pixel size X.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.PixelSizeY">
	<summary>
 Returns the height of the CCD chip pixels in microns.
 </summary>
	<value>The pixel size Y.</value>
	<exception cref="T:ASCOM.NotConnectedException">Must throw exception if data unavailable.</exception>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">
	<summary>
 Activates the Camera's mount control sytem to instruct the mount to move in a particular direction for a given period of time
 </summary>
	<remarks>
 This method returns only after the move has completed.
 <para>
 The (symbolic) values for GuideDirections are:
 <list type="bullet">
				<listheader><description>Constant     Value      Description</description></listheader>
				<item><description>guideNorth     0        North (+ declination/elevation)</description></item>
				<item><description>guideSouth     1        South (- declination/elevation)</description></item>
				<item><description>guideEast      2        East (+ right ascension/azimuth)</description></item>
				<item><description>guideWest      3        West (+ right ascension/azimuth)</description></item>
			</list>
		</para>
		<para>Note: directions are nominal and may depend on exact mount wiring.  
 <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideNorth"/> must be opposite <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideSouth"/>, and 
 <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideEast"/> must be opposite <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideWest"/>.</para>
	</remarks>
	<param name="Direction">The direction.</param>
	<param name="Duration">The duration.</param>
	<exception cref="T:ASCOM.MethodNotImplementedException">PulseGuide command is unsupported</exception>
	<exception cref="T:ASCOM.DriverException">PulseGuide command is unsuccessful</exception>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.SetCCDTemperature">
	<summary>
 Sets the camera cooler setpoint in degrees Celsius, and returns the current setpoint.
 </summary>
	<remarks>
		<para>The driver should throw an <see cref="T:ASCOM.InvalidValueException"/> if an attempt is made to set <see cref="P:ASCOM.DeviceInterface.ICameraV2.SetCCDTemperature"/> 
 outside the valid range for the camera. As an assitance to driver authors, to protect equipment and prevent harm to individuals, 
 Conform will report an issue if it is possible to set <see cref="P:ASCOM.DeviceInterface.ICameraV2.SetCCDTemperature"/> below -280C or above +100C.</para>
		<b>Note:</b>  Camera hardware and/or driver should perform cooler ramping, to prevent
 thermal shock and potential damage to the CCD array or cooler stack.
 </remarks>
	<value>The set CCD temperature.</value>
	<exception cref="T:ASCOM.DriverException">Must throw exception if command not successful.</exception>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an InvalidValueException if an attempt is made to set a value is outside the 
 camera's valid termperature setpoint range.</exception>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw exception if <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanSetCCDTemperature"/> is False.</exception>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">
	<summary>
 Starts an exposure. Use <see cref="P:ASCOM.DeviceInterface.ICameraV2.ImageReady"/> to check when the exposure is complete.
 </summary>
	<remarks>
		<para>A dark frame or bias exposure may be shorter than the V2 <see cref="P:ASCOM.DeviceInterface.ICameraV2.ExposureMin"/> value and for a bias frame can be zero.
 Check the value of <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">Light</see> and allow exposures down to 0 seconds 
 if <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">Light</see> is False.  If the hardware will not
 support an exposure duration of zero then, for dark and bias frames, set it to the minimum that is possible.</para>
		<para>Some applications will set an exposure time of zero for bias frames so it's important that the driver allows this.</para>
	</remarks>
	<param name="Duration">Duration of exposure in seconds, can be zero if <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">Light</see> is false</param>
	<param name="Light">True for light frame, False for dark frame (ignored if no shutter)</param>
	<exception cref="T:ASCOM.InvalidValueException"><see cref="P:ASCOM.DeviceInterface.ICameraV2.NumX"/>, <see cref="P:ASCOM.DeviceInterface.ICameraV2.NumY"/>, <see cref="P:ASCOM.DeviceInterface.ICameraV2.BinX"/>, 
 <see cref="P:ASCOM.DeviceInterface.ICameraV2.BinY"/>, <see cref="P:ASCOM.DeviceInterface.ICameraV2.StartX"/>, <see cref="P:ASCOM.DeviceInterface.ICameraV2.StartY"/>, or <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">Duration</see> parameters are invalid.</exception>
	<exception cref="T:ASCOM.InvalidOperationException"><see cref="P:ASCOM.DeviceInterface.ICameraV2.CanAsymmetricBin"/> is False and <see cref="P:ASCOM.DeviceInterface.ICameraV2.BinX"/> != <see cref="P:ASCOM.DeviceInterface.ICameraV2.BinY"/></exception>
	<exception cref="T:ASCOM.NotConnectedException">the exposure cannot be started for any reason, such as a hardware or communications error</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.StartX">
	<summary>
 Sets the subframe start position for the X axis (0 based) and returns the current value.
 </summary>
	<remarks>
 If binning is active, value is in binned pixels.
 </remarks>
	<value>The start X.</value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.StartY">
	<summary>
 Sets the subframe start position for the Y axis (0 based). Also returns the current value.  
 </summary>
	<remarks>
 If binning is active, value is in binned pixels.
 </remarks>
	<value>The start Y.</value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected.</exception>
</member><member name="M:ASCOM.DeviceInterface.ICameraV2.StopExposure">
	<summary>
 Stops the current exposure, if any.
 </summary>
	<remarks>
 If an exposure is in progress, the readout process is initiated.  Ignored if readout is already in process.
 </remarks>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if CanStopExposure is False</exception>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the camera or connection has an error condition</exception>
	<exception cref="T:ASCOM.DriverException">Must throw an exception if for any reason no image readout will be available.</exception>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.BayerOffsetX">
	<summary>
 Bayer X offset index
 </summary>
	<returns>The Bayer colour matrix X offset, as defined in <see cref="P:ASCOM.DeviceInterface.ICameraV2.SensorType"/>.</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
	<remarks>Returns the X offset of the Bayer matrix, as defined in <see cref="P:ASCOM.DeviceInterface.ICameraV2.SensorType"/>. Value returned must be in the range 0 to M-1, 
 where M is the width of the Bayer matrix. The offset is relative to the 0,0 pixel in the sensor array, and does not change to 
 reflect subframe settings.
 <para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.BayerOffsetY">
	<summary>
 Returns the Y offset of the Bayer matrix, as defined in <see cref="P:ASCOM.DeviceInterface.ICameraV2.SensorType"/>.
 </summary>
	<returns>The Bayer colour matrix Y offset.</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
	<remarks>The offset is relative to the 0,0 pixel in the sensor array, and does not change to reflect subframe settings. 
 <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with 
 the camera hardware, to ensure that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.CanFastReadout">
	<summary>
 Camera has a fast readout mode
 </summary>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<returns><c>true</c> when the camera supports a fast readout mode</returns>
	<remarks>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, to 
 ensure that the driver is aware of the capabilities of the specific camera model.
 <para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ExposureMax">
	<summary>
 Returns the maximum exposure time supported by <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see>.
 </summary>
	<returns>The maximum exposure time, in seconds, that the camera supports</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
	<remarks>It is recommended that this function be called only after 
 a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, to ensure that the driver is aware of the capabilities of the 
 specific camera model.
 <para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ExposureMin">
	<summary>
 Minimium exposure time
 </summary>
	<returns>The minimum exposure time, in seconds, that the camera supports through <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see></returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
	<remarks>This must be a non-zero number representing the shortest possible exposure time supported by the camera model.
 <para>Please note that for bias frame acquisition an even shorter exposure may be possible; please see <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see> 
 for more information.</para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, to ensure 
 that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ExposureResolution">
	<summary>
 Exposure resolution
 </summary>
	<returns>The smallest increment in exposure time supported by <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see>.</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
	<remarks>This can be used, for example, to specify the resolution of a user interface "spin control" used to dial in the exposure time.
 <para>Please note that the Duration provided to <see cref="M:ASCOM.DeviceInterface.ICameraV2.StartExposure(System.Double,System.Boolean)">StartExposure</see> does not have to be an exact multiple of this number; 
 the driver should choose the closest available value. Also in some cases the resolution may not be constant over the full range 
 of exposure times; in this case the smallest increment would be appropriate. </para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, to ensure 
 that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.FastReadout">
	<summary>
 Gets or sets Fast Readout Mode
 </summary>
	<value><c>true</c> for fast readout mode, <c>false</c> for normal mode</value>
	<exception cref="T:ASCOM.NotConnectedException">Thrown if the driver is not connected and a connection is required to obtain this information.</exception>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Thrown if <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanFastReadout"/> is <c>false</c>.</exception>
	<remarks>Must thrown an exception if no <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established to the camera. Must throw 
 an exception if <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanFastReadout"/> returns False.
 <para>Many cameras have a "fast mode" intended for use in focusing. When set to True, the camera will operate in Fast mode; when 
 set False, the camera will operate normally. This property should default to False.</para>
		<para>Please note that this function may in some cases interact with <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes"/>; for example, there may be modes where 
 the Fast/Normal switch is meaningless. In this case, it may be preferable to use the <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes"/> function to control 
 fast/normal switching.</para>
		<para>If this feature is not available, then <see cref="P:ASCOM.DeviceInterface.ICameraV2.CanFastReadout"/> must return False.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.Gain">
	<summary>
 Index into the <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gains"/> array for the selected camera gain
 </summary>
	<value>Short integer index for the current camera gain in the <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gains"/> string array.</value>
	<returns>Index into the Gains array for the selected camera gain</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if gain is not supported</exception>
	<remarks>
		<see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/> can be used to adjust the gain setting of the camera, if supported. There are two typical usage scenarios:
 <ul>
			<li>DSLR Cameras - <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gains"/> will return a 0-based array of strings, which correspond to different gain settings such as 
 "ISO 800". <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/> must be set to an integer in this range. <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/> and <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMax"/> must thrown an exception if 
 this mode is used.</li>
			<li>Adjustable gain CCD cameras - <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/> and <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMax"/> return integers, which specify the valid range for <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/> and <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/>.</li>
		</ul>
		<para>The driver must default <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/> to a valid value. </para>
		<para>Please note that <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutMode"/> may in some cases affect the gain of the camera; if so the driver must be written such 
 that the two properties do not conflict if both are used.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.GainMax">
	<summary>
 Maximum value of <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/>
	</summary>
	<value>Short integer representing the maximum gain value supported by the camera.</value>
	<returns>The maximum gain value that this camera supports</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if gainmax is not supported</exception>
	<remarks>When specifying the gain setting with an integer value, <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMax"/> is used in conjunction with <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/> to 
 specify the range of valid settings.
 <para><see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMax"/> shall be greater than <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/>. If either is available, then both must be available.</para>
		<para>Please see <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/> for more information.</para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, to ensure 
 that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.GainMin">
	<summary>
 Minimum value of <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/>
	</summary>
	<returns>The minimum gain value that this camera supports</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if gainmin is not supported</exception>
	<remarks>When specifying the gain setting with an integer value, <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/> is used in conjunction with <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMax"/> to 
 specify the range of valid settings.
 <para><see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMax"/> shall be greater than <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/>. If either is available, then both must be available.</para>
		<para>Please see <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/> for more information.</para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, to ensure 
 that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.Gains">
	<summary>
 Gains supported by the camera
 </summary>
	<returns>An ArrayList of gain names </returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if gainmin is not supported</exception>
	<remarks><see cref="P:ASCOM.DeviceInterface.ICameraV2.Gains"/> provides a 0-based array of available gain settings.  This is often used to specify ISO settings for DSLR cameras.  
 Typically the application software will display the available gain settings in a drop list. The application will then supply 
 the selected index to the driver via the <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/> property. 
 <para>The <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gain"/> setting may alternatively be specified using integer values; if this mode is used then <see cref="P:ASCOM.DeviceInterface.ICameraV2.Gains"/> is invalid 
 and must throw an exception. Please see <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMax"/> and <see cref="P:ASCOM.DeviceInterface.ICameraV2.GainMin"/> for more information.</para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, 
 to ensure that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.PercentCompleted">
	<summary>
 Percent conpleted, Interface Version 2 only
 </summary>
	<returns>A value between 0 and 100% indicating the completeness of this operation</returns>
	<exception cref="T:ASCOM.InvalidOperationException">Thrown when it is inappropriate to call <see cref="P:ASCOM.DeviceInterface.ICameraV2.PercentCompleted"/></exception>
	<remarks>If valid, returns an integer between 0 and 100, where 0 indicates 0% progress (function just started) and 
 100 indicates 100% progress (i.e. completion).
 <para>At the discretion of the driver author, <see cref="P:ASCOM.DeviceInterface.ICameraV2.PercentCompleted"/> may optionally be valid 
 when <see cref="P:ASCOM.DeviceInterface.ICameraV2.CameraState"/> is in any or all of the following 
 states: <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraExposing"/>, 
 <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraWaiting"/>, <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraReading"/> 
 or <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraDownload"/>. In all other states an exception shall be thrown.</para>
		<para>Typically the application user interface will show a progress bar based on the <see cref="P:ASCOM.DeviceInterface.ICameraV2.PercentCompleted"/> value.</para>
		<para>Please note that client applications are not required to use this value, and in some cases may display status 
 information based on other information, such as time elapsed.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ReadoutMode">
	<summary>
 Readout mode, Interface Version 2 only
 </summary>
	<value></value>
	<returns>Short integer index into the <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes">ReadoutModes</see> array of string readout mode names indicating 
 the camera's current readout mode.</returns>
	<exception cref="T:ASCOM.InvalidValueException">Must throw an exception if set to an illegal or unavailable mode.</exception>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<remarks><see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutMode"/> is an index into the array <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes"/>, and selects the desired readout mode for the camera.  
 Defaults to 0 if not set.  Throws an exception if the selected mode is not available.
 <para>It is strongly recommended, but not required, that driver authors make the 0-index mode suitable for standard imaging operations, 
 since it is the default.</para>
		<para>Please see <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes"/> for additional information.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes">
	<summary>
 List of available readout modes, Interface Version 2 only
 </summary>
	<returns>An ArrayList of readout mode names</returns>
	<exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if gainmin is not supported</exception>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<remarks>This property provides an array of strings, each of which describes an available readout mode of the camera.  
 At least two strings must be present in the list. The user interface of a control application will typically present to the 
 user a drop-list of modes.  The choice of available modes made available is entirely at the discretion of the driver author. 
 Please note that if the camera has many different modes of operation, then the most commonly adjusted settings should be in 
 <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes"/>; additional settings may be provided using <see cref="M:ASCOM.DeviceInterface.ICameraV2.SetupDialog"/>.
 <para>To select a mode, the application will set <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutMode"/> to the index of the desired mode.  The index is zero-based.</para>
		<para>This property should only be read while a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> to the camera is actually established.  Drivers often support 
 multiple cameras with different capabilities, which are not known until the <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is made.  If the available readout modes 
 are not known because no <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> has been established, this property shall throw an exception.</para>
		<para>Please note that the default <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutMode"/> setting is 0. It is strongly recommended, but not required, that 
 driver authors use the 0-index mode for standard imaging operations, since it is the default.</para>
		<para>This feature may be used in parallel with <see cref="P:ASCOM.DeviceInterface.ICameraV2.FastReadout"/>; however, care should be taken to ensure that the two 
 features work together consistently. If there are modes that are inconsistent having a separate fast/normal switch, then it 
 may be better to simply list Fast as one of the <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutModes"/>.</para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with 
 the camera hardware, to ensure that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.SensorName">
	<summary>
 Sensor name, Interface Version 2 only
 </summary>
	<returns>The name of sensor used within the camera</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<remarks>Returns the name (datasheet part number) of the sensor, e.g. ICX285AL.  The format is to be exactly as shown on 
 manufacturer data sheet, subject to the following rules. All letter shall be uppercase.  Spaces shall not be included.
 <para>Any extra suffixes that define region codes, package types, temperature range, coatings, grading, color/monochrome, 
 etc. shall not be included. For color sensors, if a suffix differentiates different Bayer matrix encodings, it shall be 
 included.</para>
		<para>Examples:</para>
		<list type="bullet">
			<item><description>ICX285AL-F shall be reported as ICX285</description></item>
			<item><description>KAF-8300-AXC-CD-AA shall be reported as KAF-8300</description></item>
		</list>
		<para><b>Note:</b></para>
		<para>The most common usage of this property is to select approximate color balance parameters to be applied to 
 the Bayer matrix of one-shot color sensors.  Application authors should assume that an appropriate IR cutoff filter is 
 in place for color sensors.</para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with 
 the camera hardware, to ensure that the driver is aware of the capabilities of the specific camera model.</para>
		<para>This is only available for the Camera Interface Version 2</para>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.ICameraV2.SensorType">
	<summary>
 Type of colour information returned by the the camera sensor, Interface Version 2 only
 </summary>
	<value></value>
	<returns>The <see cref="T:ASCOM.DeviceInterface.SensorType"/> enum value of the camera sensor</returns>
	<exception cref="T:ASCOM.NotConnectedException">Must throw an exception if the information is not available. (Some drivers may require an 
 active <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> in order to retrieve necessary information from the camera.)</exception>
	<remarks>
		<para>This is only available for the Camera Interface Version 2</para>
		<para><see cref="P:ASCOM.DeviceInterface.ICameraV2.SensorType"/> returns a value indicating whether the sensor is monochrome, or what Bayer matrix it encodes.  
 The following values are defined:</para>
		<para>
			<table style="width:76.24%;" cellspacing="0" width="76.24%">
				<col style="width: 11.701%;"></col>
				<col style="width: 20.708%;"></col>
				<col style="width: 67.591%;"></col>
				<tr>
					<td colspan="1" rowspan="1" style="width: 11.701%; padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-top-color: #000000; border-top-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid;&#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; &#xA; background-color: #00ffff;" width="11.701%">
						<b>Value</b></td>
					<td colspan="1" rowspan="1" style="width: 20.708%; padding-right: 10px; padding-left: 10px; &#xA; border-top-color: #000000; border-top-style: Solid; &#xA; border-right-style: Solid; border-right-color: #000000; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; &#xA; background-color: #00ffff;" width="20.708%">
						<b>Enumeration</b></td>
					<td colspan="1" rowspan="1" style="width: 67.591%; padding-right: 10px; padding-left: 10px; &#xA; border-top-color: #000000; border-top-style: Solid; &#xA; border-right-style: Solid; border-right-color: #000000; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; &#xA; background-color: #00ffff;" width="67.591%">
						<b>Meaning</b></td>
				</tr>
				<tr>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 0</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Monochrome</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Camera produces monochrome array with no Bayer encoding</td>
				</tr>
				<tr>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 1</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Colour</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Camera produces color image directly, requiring not Bayer decoding</td>
				</tr>
				<tr>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 2</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 RGGB</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Camera produces RGGB encoded Bayer array images</td>
				</tr>
				<tr>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 3</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 CMYG</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Camera produces CMYG encoded Bayer array images</td>
				</tr>
				<tr>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 4</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 CMYG2</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Camera produces CMYG2 encoded Bayer array images</td>
				</tr>
				<tr>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 5</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 LRGB</td>
					<td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
 Camera produces Kodak TRUESENSE Bayer LRGB array images</td>
				</tr>
			</table>
		</para>
		<para>Please note that additional values may be defined in future updates of the standard, as new Bayer matrices may be created 
 by sensor manufacturers in the future.  If this occurs, then a new enumeration value shall be defined. The pre-existing enumeration 
 values shall not change.
 <para><see cref="P:ASCOM.DeviceInterface.ICameraV2.SensorType"/> can possibly change between exposures, for example if <see cref="P:ASCOM.DeviceInterface.ICameraV2.ReadoutMode">Camera.ReadoutMode</see> is changed, and should always be checked after each exposure.</para>
			<para>In the following definitions, R = red, G = green, B = blue, C = cyan, M = magenta, Y = yellow.  The Bayer matrix is 
 defined with X increasing from left to right, and Y increasing from top to bottom. The pattern repeats every N x M pixels for the 
 entire pixel array, where N is the height of the Bayer matrix, and M is the width.</para>
			<para>RGGB indicates the following matrix:</para>
		</para>
		<para>
			<table style="width:41.254%;" cellspacing="0" width="41.254%">
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
					</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 1</b></td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 R</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 G</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
						<b>Y = 1</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 G</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 B</td>
				</tr>
			</table>
		</para>
		<para>CMYG indicates the following matrix:</para>
		<para>
			<table style="width:41.254%;" cellspacing="0" width="41.254%">
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
					</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 1</b></td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 Y</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 C</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
						<b>Y = 1</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 G</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 M</td>
				</tr>
			</table>
		</para>
		<para>CMYG2 indicates the following matrix:</para>
		<para>
			<table style="width:41.254%;" cellspacing="0" width="41.254%">
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
					</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 1</b></td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 C</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 Y</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>Y = 1</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 M</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 G</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 2</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 C</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 Y</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
						<b>Y = 3</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 G</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 M</td>
				</tr>
			</table>
		</para>
		<para>LRGB indicates the following matrix (Kodak TRUESENSE):</para>
		<para>
			<table style="width:68.757%;" cellspacing="0" width="68.757%">
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
					</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 1</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 2</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 3</b></td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 L</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 R</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 L</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 G</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>Y = 1</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 R</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 L</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 G</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 L</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 2</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 L</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 G</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 L</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 B</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
						<b>Y = 3</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 G</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 L</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 B</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 L</td>
				</tr>
			</table>
		</para>
		<para>The alignment of the array may be modified by <see cref="P:ASCOM.DeviceInterface.ICameraV2.BayerOffsetX"/> and <see cref="P:ASCOM.DeviceInterface.ICameraV2.BayerOffsetY"/>. 
 The offset is measured from the 0,0 position in the sensor array to the upper left corner of the Bayer matrix table. 
 Please note that the Bayer offset values are not affected by subframe settings.</para>
		<para>For example, if a CMYG2 sensor has a Bayer matrix offset as shown below, <see cref="P:ASCOM.DeviceInterface.ICameraV2.BayerOffsetX"/> is 0 and <see cref="P:ASCOM.DeviceInterface.ICameraV2.BayerOffsetY"/> is 1:</para>
		<para>
			<table style="width:41.254%;" cellspacing="0" width="41.254%">
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<col style="width: 10%;"></col>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
					</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>X = 1</b></td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 0</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 G</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 M</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
						<b>Y = 1</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 C</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 Y</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
						<b>Y = 2</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
 M</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
 G</td>
				</tr>
				<tr valign="top" align="center">
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
						<b>Y = 3</b></td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 C</td>
					<td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
 Y</td>
				</tr>
			</table>
		</para>
		<para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.ICameraV2.Connected">connection</see> is established with the camera hardware, to ensure that 
 the driver is aware of the capabilities of the specific camera model.</para>
	</remarks>
</member><member name="T:ASCOM.DeviceInterface.ICameraV2">
	<summary>
 Defines the ICamera Interface
 </summary>
</member><member name="P:ASCOM.DeviceInterface.IAxisRates.Item(System.Int32)">
	<summary>
 Return information about the rates at which the telescope may be moved about the specified axis by the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method.
 </summary>
	<param name="index">The axis about which rate information is desired</param>
	<value>Collection of Rate objects describing the supported rates of motion that can be supplied to the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method for the specified axis.</value>
	<returns>Collection of Rate objects </returns>
	<remarks><para>The (symbolic) values for Index (<see cref="T:ASCOM.DeviceInterface.TelescopeAxes"/>) are:</para>
		<bl>
			<li><see cref="F:ASCOM.DeviceInterface.TelescopeAxes.axisPrimary"/> 0 Primary axis (e.g., Right Ascension or Azimuth)</li>
			<li><see cref="F:ASCOM.DeviceInterface.TelescopeAxes.axisSecondary"/> 1 Secondary axis (e.g., Declination or Altitude)</li>
			<li><see cref="F:ASCOM.DeviceInterface.TelescopeAxes.axisTertiary"/> 2 Tertiary axis (e.g. imager rotator/de-rotator)</li>
		</bl>
	</remarks>
</member><member name="P:ASCOM.DeviceInterface.IAxisRates.Count">
	<summary>
 Number of items in the returned collection
 </summary>
	<value>Number of items</value>
	<returns>Integer number of items</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.DeviceInterface.IAxisRates.Dispose">
	<summary>
 Disposes of the object and cleans up
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.DeviceInterface.IAxisRates.GetEnumerator">
	<summary>
 Returns an enumerator for the collection
 </summary>
	<returns>An enumerator</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.DeviceInterface.IAxisRates">
	<summary>
 A collection of rates at which the telescope may be moved about the specified axis by the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method.
 This is only used if the telescope interface version is 2 or 3
 </summary>
	<remarks><para>See the description of the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> method for more information.</para>
		<para>This method must return an empty collection if <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> is not supported.</para>
		<para>The values used in <see cref="T:ASCOM.DeviceInterface.IRate"/> members must be non-negative; forward and backward motion is achieved by the application
 applying an appropriate sign to the returned <see cref="T:ASCOM.DeviceInterface.IRate"/> values in the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)"/> command.</para>
	</remarks>
</member><member name="F:ASCOM.DeviceInterface.AlignmentModes.algAltAz">
	<summary>
 Altitude-Azimuth alignment.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.AlignmentModes.algPolar">
	<summary>
 Polar (equatorial) mount other than German equatorial.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.AlignmentModes.algGermanPolar">
	<summary>
 German equatorial mount.
 </summary>
</member><member name="T:ASCOM.DeviceInterface.AlignmentModes">
	<summary>
 The alignment mode of the mount.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.DriveRates.driveSidereal">
	<summary>
 Sidereal tracking rate (15.0 arcseconds per sidereal second).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.DriveRates.driveLunar">
	<summary>
 Lunar tracking rate (14.685 arcseconds per second).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.DriveRates.driveSolar">
	<summary>
 Solar tracking rate (15.0 arcseconds per second).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.DriveRates.driveKing">
	<summary>
 King tracking rate (15.0369 arcseconds per second).
 </summary>
</member><member name="T:ASCOM.DeviceInterface.DriveRates">
	<summary>
 Well-known telescope tracking rates.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.EquatorialCoordinateType.equOther">
	<summary>
 Custom or unknown equinox and/or reference frame.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.EquatorialCoordinateType.equLocalTopocentric">
	<summary>
 Local topocentric; this is the most common for amateur telescopes.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.EquatorialCoordinateType.equJ2000">
	<summary>
 J2000 equator/equinox, ICRS reference frame.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.EquatorialCoordinateType.equJ2050">
	<summary>
 J2050 equator/equinox, ICRS reference frame.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.EquatorialCoordinateType.equB1950">
	<summary>
 B1950 equinox, FK4 reference frame.
 </summary>
</member><member name="T:ASCOM.DeviceInterface.EquatorialCoordinateType">
	<summary>
 Equatorial coordinate systems used by telescopes.
 Only used with telescope interface versions 2 and 3
 </summary>
</member><member name="F:ASCOM.DeviceInterface.GuideDirections.guideNorth">
	<summary>
 North (+ declination/altitude).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.GuideDirections.guideSouth">
	<summary>
 South (- declination/altitude).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.GuideDirections.guideEast">
	<summary>
 East (+ right ascension/azimuth).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.GuideDirections.guideWest">
	<summary>
 West (- right ascension/azimuth)
 </summary>
</member><member name="T:ASCOM.DeviceInterface.GuideDirections">
	<summary>
 The direction in which the guide-rate motion is to be made.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.TelescopeAxes.axisPrimary">
	<summary>
 Primary axis (e.g., Right Ascension or Azimuth).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.TelescopeAxes.axisSecondary">
	<summary>
 Secondary axis (e.g., Declination or Altitude).
 </summary>
</member><member name="F:ASCOM.DeviceInterface.TelescopeAxes.axisTertiary">
	<summary>
 Tertiary axis (e.g. imager rotator/de-rotator).
 </summary>
</member><member name="T:ASCOM.DeviceInterface.TelescopeAxes">
	<summary>
 The telescope axes
 Only used with if the telescope interface version is 2 or 3
 </summary>
</member><member name="F:ASCOM.DeviceInterface.PierSide.pierEast">
	<summary>
 Normal pointing state
 </summary>
</member><member name="F:ASCOM.DeviceInterface.PierSide.pierUnknown">
	<summary>
 Unknown or indeterminate.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.PierSide.pierWest">
	<summary>
 Through the pole pointing state
 </summary>
</member><member name="T:ASCOM.DeviceInterface.PierSide">
	<summary>
 The pointing state of the mount
 </summary>
	<remarks>
		<para><c>Pier side</c> is a GEM-specific term that has historically caused much confusion. 
 As of Platform 6, the PierSide property is defined to refer to pointing state. Please see <see cref="P:ASCOM.DeviceInterface.ITelescopeV3.SideOfPier"/>
 for much more information on this topic.</para>
		<para>Only used with telescope interface versions 2 and later.</para>
	</remarks>
</member><member name="F:ASCOM.DeviceInterface.ShutterState.shutterOpen">
	<summary>
 Dome shutter status open
 </summary>
</member><member name="F:ASCOM.DeviceInterface.ShutterState.shutterClosed">
	<summary>
 Dome shutter status closed
 </summary>
</member><member name="F:ASCOM.DeviceInterface.ShutterState.shutterOpening">
	<summary>
 Dome shutter status opening
 </summary>
</member><member name="F:ASCOM.DeviceInterface.ShutterState.shutterClosing">
	<summary>
 Dome shutter status closing
 </summary>
</member><member name="F:ASCOM.DeviceInterface.ShutterState.shutterError">
	<summary>
 Dome shutter status error
 </summary>
</member><member name="T:ASCOM.DeviceInterface.ShutterState">
	<summary>
 ASCOM Dome ShutterState status values.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.CameraStates.cameraIdle">
	<summary>
 Camera status idle
 </summary>
</member><member name="F:ASCOM.DeviceInterface.CameraStates.cameraWaiting">
	<summary>
 Camera status waiting
 </summary>
</member><member name="F:ASCOM.DeviceInterface.CameraStates.cameraExposing">
	<summary>
 Camera status exposing
 </summary>
</member><member name="F:ASCOM.DeviceInterface.CameraStates.cameraReading">
	<summary>
 Camera status reading
 </summary>
</member><member name="F:ASCOM.DeviceInterface.CameraStates.cameraDownload">
	<summary>
 Camera status download
 </summary>
</member><member name="F:ASCOM.DeviceInterface.CameraStates.cameraError">
	<summary>
 Camera status error
 </summary>
</member><member name="T:ASCOM.DeviceInterface.CameraStates">
	<summary>
 ASCOM Camera status values.
 </summary>
</member><member name="F:ASCOM.DeviceInterface.SensorType.Monochrome">
	<summary>
 Camera produces monochrome array with no Bayer encoding
 </summary>
</member><member name="F:ASCOM.DeviceInterface.SensorType.Color">
	<summary>
 Camera produces color image directly, requiring not Bayer decoding
 </summary>
</member><member name="F:ASCOM.DeviceInterface.SensorType.RGGB">
	<summary>
 Camera produces RGGB encoded Bayer array images
 </summary>
</member><member name="F:ASCOM.DeviceInterface.SensorType.CMYG">
	<summary>
 Camera produces CMYG encoded Bayer array images
 </summary>
</member><member name="F:ASCOM.DeviceInterface.SensorType.CMYG2">
	<summary>
 Camera produces CMYG2 encoded Bayer array images
 </summary>
</member><member name="F:ASCOM.DeviceInterface.SensorType.LRGB">
	<summary>
 Camera produces Kodak TRUESENSE Bayer LRGB array images
 </summary>
</member><member name="T:ASCOM.DeviceInterface.SensorType">
	<summary>
 Sensor type, identifies the type of colour sensor
 V2 cameras only
 </summary>]

</member>
</members>
</doc>